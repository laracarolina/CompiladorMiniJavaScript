State 0:
prog' -> . prog [ # ]
-- On FUNCTION shift to state 1
-- On prog shift to state 217
-- On list(funcao) shift to state 218
-- On funcao shift to state 222
-- On WHILE reduce production list(funcao) -> 
-- On VAR reduce production list(funcao) -> 
-- On SWITCH reduce production list(funcao) -> 
-- On RETURN reduce production list(funcao) -> 
-- On LITSTRING reduce production list(funcao) -> 
-- On LITINT reduce production list(funcao) -> 
-- On LITFLOAT reduce production list(funcao) -> 
-- On LITCHAR reduce production list(funcao) -> 
-- On LITBOOL reduce production list(funcao) -> 
-- On LET reduce production list(funcao) -> 
-- On INCR reduce production list(funcao) -> 
-- On IF reduce production list(funcao) -> 
-- On ID reduce production list(funcao) -> 
-- On FUNCTION reduce production list(funcao) -> 
-- On FOR reduce production list(funcao) -> 
-- On EOF reduce production list(funcao) -> 
-- On DO reduce production list(funcao) -> 
-- On DECR reduce production list(funcao) -> 
-- On CONST reduce production list(funcao) -> 
-- On CONSOLELOG reduce production list(funcao) -> 
** Conflict on FUNCTION

State 1:
funcao -> FUNCTION . ID APAR parametros FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On ID shift to state 2

State 2:
funcao -> FUNCTION ID . APAR parametros FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On APAR shift to state 3

State 3:
funcao -> FUNCTION ID APAR . parametros FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On VAR shift to state 4
-- On separated_nonempty_list(VIRG,parametro) shift to state 6
-- On parametros shift to state 7
-- On parametro shift to state 213
-- On loption(separated_nonempty_list(VIRG,parametro)) shift to state 216
-- On FPAR reduce production loption(separated_nonempty_list(VIRG,parametro)) -> 

State 4:
parametro -> VAR . ID [ VIRG FPAR ]
-- On ID shift to state 5

State 5:
parametro -> VAR ID . [ VIRG FPAR ]
-- On VIRG reduce production parametro -> VAR ID 
-- On FPAR reduce production parametro -> VAR ID 

State 6:
loption(separated_nonempty_list(VIRG,parametro)) -> separated_nonempty_list(VIRG,parametro) . [ FPAR ]
-- On FPAR reduce production loption(separated_nonempty_list(VIRG,parametro)) -> separated_nonempty_list(VIRG,parametro) 

State 7:
funcao -> FUNCTION ID APAR parametros . FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On FPAR shift to state 8

State 8:
funcao -> FUNCTION ID APAR parametros FPAR . ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On ACHAVE shift to state 9

State 9:
funcao -> FUNCTION ID APAR parametros FPAR ACHAVE . list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 211
-- On chamada_funcao shift to state 164
-- On FCHAVE reduce production list(statement) -> 

State 10:
stm_while -> WHILE . APAR expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_while -> WHILE . APAR expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On APAR shift to state 11

State 11:
stm_while -> WHILE APAR . expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_while -> WHILE APAR . expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 76
-- On chamada_funcao shift to state 28

State 12:
expressao -> NOT . termo [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On ID shift to state 18
-- On variavel shift to state 21
-- On termo shift to state 75
-- On literal shift to state 27
-- On chamada_funcao shift to state 28

State 13:
literal -> LITSTRING . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production literal -> LITSTRING 
-- On VIRG reduce production literal -> LITSTRING 
-- On VAR reduce production literal -> LITSTRING 
-- On SWITCH reduce production literal -> LITSTRING 
-- On RETURN reduce production literal -> LITSTRING 
-- On POT reduce production literal -> LITSTRING 
-- On PONTOVIRG reduce production literal -> LITSTRING 
-- On OR reduce production literal -> LITSTRING 
-- On MULTATRIB reduce production literal -> LITSTRING 
-- On MULT reduce production literal -> LITSTRING 
-- On MOD reduce production literal -> LITSTRING 
-- On MENOSATRIB reduce production literal -> LITSTRING 
-- On MENOS reduce production literal -> LITSTRING 
-- On MENORIGUAL reduce production literal -> LITSTRING 
-- On MENOR reduce production literal -> LITSTRING 
-- On MAISATRIB reduce production literal -> LITSTRING 
-- On MAIS reduce production literal -> LITSTRING 
-- On MAIORIGUAL reduce production literal -> LITSTRING 
-- On MAIOR reduce production literal -> LITSTRING 
-- On LITSTRING reduce production literal -> LITSTRING 
-- On LITINT reduce production literal -> LITSTRING 
-- On LITFLOAT reduce production literal -> LITSTRING 
-- On LITCHAR reduce production literal -> LITSTRING 
-- On LITBOOL reduce production literal -> LITSTRING 
-- On LET reduce production literal -> LITSTRING 
-- On INCR reduce production literal -> LITSTRING 
-- On IGUAL reduce production literal -> LITSTRING 
-- On IF reduce production literal -> LITSTRING 
-- On ID reduce production literal -> LITSTRING 
-- On FUNCTION reduce production literal -> LITSTRING 
-- On FPAR reduce production literal -> LITSTRING 
-- On FOR reduce production literal -> LITSTRING 
-- On FCOLCH reduce production literal -> LITSTRING 
-- On FCHAVE reduce production literal -> LITSTRING 
-- On EOF reduce production literal -> LITSTRING 
-- On ELSE reduce production literal -> LITSTRING 
-- On DO reduce production literal -> LITSTRING 
-- On DIV reduce production literal -> LITSTRING 
-- On DIF reduce production literal -> LITSTRING 
-- On DECR reduce production literal -> LITSTRING 
-- On CONST reduce production literal -> LITSTRING 
-- On CONSOLELOG reduce production literal -> LITSTRING 
-- On BREAK reduce production literal -> LITSTRING 
-- On AND reduce production literal -> LITSTRING 

State 14:
literal -> LITINT . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production literal -> LITINT 
-- On VIRG reduce production literal -> LITINT 
-- On VAR reduce production literal -> LITINT 
-- On SWITCH reduce production literal -> LITINT 
-- On RETURN reduce production literal -> LITINT 
-- On POT reduce production literal -> LITINT 
-- On PONTOVIRG reduce production literal -> LITINT 
-- On OR reduce production literal -> LITINT 
-- On MULTATRIB reduce production literal -> LITINT 
-- On MULT reduce production literal -> LITINT 
-- On MOD reduce production literal -> LITINT 
-- On MENOSATRIB reduce production literal -> LITINT 
-- On MENOS reduce production literal -> LITINT 
-- On MENORIGUAL reduce production literal -> LITINT 
-- On MENOR reduce production literal -> LITINT 
-- On MAISATRIB reduce production literal -> LITINT 
-- On MAIS reduce production literal -> LITINT 
-- On MAIORIGUAL reduce production literal -> LITINT 
-- On MAIOR reduce production literal -> LITINT 
-- On LITSTRING reduce production literal -> LITINT 
-- On LITINT reduce production literal -> LITINT 
-- On LITFLOAT reduce production literal -> LITINT 
-- On LITCHAR reduce production literal -> LITINT 
-- On LITBOOL reduce production literal -> LITINT 
-- On LET reduce production literal -> LITINT 
-- On INCR reduce production literal -> LITINT 
-- On IGUAL reduce production literal -> LITINT 
-- On IF reduce production literal -> LITINT 
-- On ID reduce production literal -> LITINT 
-- On FUNCTION reduce production literal -> LITINT 
-- On FPAR reduce production literal -> LITINT 
-- On FOR reduce production literal -> LITINT 
-- On FCOLCH reduce production literal -> LITINT 
-- On FCHAVE reduce production literal -> LITINT 
-- On EOF reduce production literal -> LITINT 
-- On ELSE reduce production literal -> LITINT 
-- On DO reduce production literal -> LITINT 
-- On DIV reduce production literal -> LITINT 
-- On DIF reduce production literal -> LITINT 
-- On DECR reduce production literal -> LITINT 
-- On CONST reduce production literal -> LITINT 
-- On CONSOLELOG reduce production literal -> LITINT 
-- On BREAK reduce production literal -> LITINT 
-- On AND reduce production literal -> LITINT 

State 15:
literal -> LITFLOAT . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production literal -> LITFLOAT 
-- On VIRG reduce production literal -> LITFLOAT 
-- On VAR reduce production literal -> LITFLOAT 
-- On SWITCH reduce production literal -> LITFLOAT 
-- On RETURN reduce production literal -> LITFLOAT 
-- On POT reduce production literal -> LITFLOAT 
-- On PONTOVIRG reduce production literal -> LITFLOAT 
-- On OR reduce production literal -> LITFLOAT 
-- On MULTATRIB reduce production literal -> LITFLOAT 
-- On MULT reduce production literal -> LITFLOAT 
-- On MOD reduce production literal -> LITFLOAT 
-- On MENOSATRIB reduce production literal -> LITFLOAT 
-- On MENOS reduce production literal -> LITFLOAT 
-- On MENORIGUAL reduce production literal -> LITFLOAT 
-- On MENOR reduce production literal -> LITFLOAT 
-- On MAISATRIB reduce production literal -> LITFLOAT 
-- On MAIS reduce production literal -> LITFLOAT 
-- On MAIORIGUAL reduce production literal -> LITFLOAT 
-- On MAIOR reduce production literal -> LITFLOAT 
-- On LITSTRING reduce production literal -> LITFLOAT 
-- On LITINT reduce production literal -> LITFLOAT 
-- On LITFLOAT reduce production literal -> LITFLOAT 
-- On LITCHAR reduce production literal -> LITFLOAT 
-- On LITBOOL reduce production literal -> LITFLOAT 
-- On LET reduce production literal -> LITFLOAT 
-- On INCR reduce production literal -> LITFLOAT 
-- On IGUAL reduce production literal -> LITFLOAT 
-- On IF reduce production literal -> LITFLOAT 
-- On ID reduce production literal -> LITFLOAT 
-- On FUNCTION reduce production literal -> LITFLOAT 
-- On FPAR reduce production literal -> LITFLOAT 
-- On FOR reduce production literal -> LITFLOAT 
-- On FCOLCH reduce production literal -> LITFLOAT 
-- On FCHAVE reduce production literal -> LITFLOAT 
-- On EOF reduce production literal -> LITFLOAT 
-- On ELSE reduce production literal -> LITFLOAT 
-- On DO reduce production literal -> LITFLOAT 
-- On DIV reduce production literal -> LITFLOAT 
-- On DIF reduce production literal -> LITFLOAT 
-- On DECR reduce production literal -> LITFLOAT 
-- On CONST reduce production literal -> LITFLOAT 
-- On CONSOLELOG reduce production literal -> LITFLOAT 
-- On BREAK reduce production literal -> LITFLOAT 
-- On AND reduce production literal -> LITFLOAT 

State 16:
literal -> LITCHAR . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production literal -> LITCHAR 
-- On VIRG reduce production literal -> LITCHAR 
-- On VAR reduce production literal -> LITCHAR 
-- On SWITCH reduce production literal -> LITCHAR 
-- On RETURN reduce production literal -> LITCHAR 
-- On POT reduce production literal -> LITCHAR 
-- On PONTOVIRG reduce production literal -> LITCHAR 
-- On OR reduce production literal -> LITCHAR 
-- On MULTATRIB reduce production literal -> LITCHAR 
-- On MULT reduce production literal -> LITCHAR 
-- On MOD reduce production literal -> LITCHAR 
-- On MENOSATRIB reduce production literal -> LITCHAR 
-- On MENOS reduce production literal -> LITCHAR 
-- On MENORIGUAL reduce production literal -> LITCHAR 
-- On MENOR reduce production literal -> LITCHAR 
-- On MAISATRIB reduce production literal -> LITCHAR 
-- On MAIS reduce production literal -> LITCHAR 
-- On MAIORIGUAL reduce production literal -> LITCHAR 
-- On MAIOR reduce production literal -> LITCHAR 
-- On LITSTRING reduce production literal -> LITCHAR 
-- On LITINT reduce production literal -> LITCHAR 
-- On LITFLOAT reduce production literal -> LITCHAR 
-- On LITCHAR reduce production literal -> LITCHAR 
-- On LITBOOL reduce production literal -> LITCHAR 
-- On LET reduce production literal -> LITCHAR 
-- On INCR reduce production literal -> LITCHAR 
-- On IGUAL reduce production literal -> LITCHAR 
-- On IF reduce production literal -> LITCHAR 
-- On ID reduce production literal -> LITCHAR 
-- On FUNCTION reduce production literal -> LITCHAR 
-- On FPAR reduce production literal -> LITCHAR 
-- On FOR reduce production literal -> LITCHAR 
-- On FCOLCH reduce production literal -> LITCHAR 
-- On FCHAVE reduce production literal -> LITCHAR 
-- On EOF reduce production literal -> LITCHAR 
-- On ELSE reduce production literal -> LITCHAR 
-- On DO reduce production literal -> LITCHAR 
-- On DIV reduce production literal -> LITCHAR 
-- On DIF reduce production literal -> LITCHAR 
-- On DECR reduce production literal -> LITCHAR 
-- On CONST reduce production literal -> LITCHAR 
-- On CONSOLELOG reduce production literal -> LITCHAR 
-- On BREAK reduce production literal -> LITCHAR 
-- On AND reduce production literal -> LITCHAR 

State 17:
literal -> LITBOOL . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production literal -> LITBOOL 
-- On VIRG reduce production literal -> LITBOOL 
-- On VAR reduce production literal -> LITBOOL 
-- On SWITCH reduce production literal -> LITBOOL 
-- On RETURN reduce production literal -> LITBOOL 
-- On POT reduce production literal -> LITBOOL 
-- On PONTOVIRG reduce production literal -> LITBOOL 
-- On OR reduce production literal -> LITBOOL 
-- On MULTATRIB reduce production literal -> LITBOOL 
-- On MULT reduce production literal -> LITBOOL 
-- On MOD reduce production literal -> LITBOOL 
-- On MENOSATRIB reduce production literal -> LITBOOL 
-- On MENOS reduce production literal -> LITBOOL 
-- On MENORIGUAL reduce production literal -> LITBOOL 
-- On MENOR reduce production literal -> LITBOOL 
-- On MAISATRIB reduce production literal -> LITBOOL 
-- On MAIS reduce production literal -> LITBOOL 
-- On MAIORIGUAL reduce production literal -> LITBOOL 
-- On MAIOR reduce production literal -> LITBOOL 
-- On LITSTRING reduce production literal -> LITBOOL 
-- On LITINT reduce production literal -> LITBOOL 
-- On LITFLOAT reduce production literal -> LITBOOL 
-- On LITCHAR reduce production literal -> LITBOOL 
-- On LITBOOL reduce production literal -> LITBOOL 
-- On LET reduce production literal -> LITBOOL 
-- On INCR reduce production literal -> LITBOOL 
-- On IGUAL reduce production literal -> LITBOOL 
-- On IF reduce production literal -> LITBOOL 
-- On ID reduce production literal -> LITBOOL 
-- On FUNCTION reduce production literal -> LITBOOL 
-- On FPAR reduce production literal -> LITBOOL 
-- On FOR reduce production literal -> LITBOOL 
-- On FCOLCH reduce production literal -> LITBOOL 
-- On FCHAVE reduce production literal -> LITBOOL 
-- On EOF reduce production literal -> LITBOOL 
-- On ELSE reduce production literal -> LITBOOL 
-- On DO reduce production literal -> LITBOOL 
-- On DIV reduce production literal -> LITBOOL 
-- On DIF reduce production literal -> LITBOOL 
-- On DECR reduce production literal -> LITBOOL 
-- On CONST reduce production literal -> LITBOOL 
-- On CONSOLELOG reduce production literal -> LITBOOL 
-- On BREAK reduce production literal -> LITBOOL 
-- On AND reduce production literal -> LITBOOL 

State 18:
chamada_funcao -> ID . APAR funcao_args FPAR option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
variavel -> ID . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK ATRIB AND ]
variavel -> ID . ACOLCH expressao FCOLCH [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK ATRIB AND ]
-- On APAR shift to state 19
-- On ACOLCH shift to state 72
-- On WHILE reduce production variavel -> ID 
-- On VIRG reduce production variavel -> ID 
-- On VAR reduce production variavel -> ID 
-- On SWITCH reduce production variavel -> ID 
-- On RETURN reduce production variavel -> ID 
-- On POT reduce production variavel -> ID 
-- On PONTOVIRG reduce production variavel -> ID 
-- On OR reduce production variavel -> ID 
-- On MULTATRIB reduce production variavel -> ID 
-- On MULT reduce production variavel -> ID 
-- On MOD reduce production variavel -> ID 
-- On MENOSATRIB reduce production variavel -> ID 
-- On MENOS reduce production variavel -> ID 
-- On MENORIGUAL reduce production variavel -> ID 
-- On MENOR reduce production variavel -> ID 
-- On MAISATRIB reduce production variavel -> ID 
-- On MAIS reduce production variavel -> ID 
-- On MAIORIGUAL reduce production variavel -> ID 
-- On MAIOR reduce production variavel -> ID 
-- On LITSTRING reduce production variavel -> ID 
-- On LITINT reduce production variavel -> ID 
-- On LITFLOAT reduce production variavel -> ID 
-- On LITCHAR reduce production variavel -> ID 
-- On LITBOOL reduce production variavel -> ID 
-- On LET reduce production variavel -> ID 
-- On INCR reduce production variavel -> ID 
-- On IGUAL reduce production variavel -> ID 
-- On IF reduce production variavel -> ID 
-- On ID reduce production variavel -> ID 
-- On FUNCTION reduce production variavel -> ID 
-- On FPAR reduce production variavel -> ID 
-- On FOR reduce production variavel -> ID 
-- On FCOLCH reduce production variavel -> ID 
-- On FCHAVE reduce production variavel -> ID 
-- On EOF reduce production variavel -> ID 
-- On ELSE reduce production variavel -> ID 
-- On DO reduce production variavel -> ID 
-- On DIV reduce production variavel -> ID 
-- On DIF reduce production variavel -> ID 
-- On DECR reduce production variavel -> ID 
-- On CONST reduce production variavel -> ID 
-- On CONSOLELOG reduce production variavel -> ID 
-- On BREAK reduce production variavel -> ID 
-- On ATRIB reduce production variavel -> ID 
-- On AND reduce production variavel -> ID 

State 19:
chamada_funcao -> ID APAR . funcao_args FPAR option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On separated_nonempty_list(VIRG,expressao) shift to state 58
-- On loption(separated_nonempty_list(VIRG,expressao)) shift to state 59
-- On literal shift to state 27
-- On funcao_args shift to state 69
-- On expressao shift to state 65
-- On chamada_funcao shift to state 28
-- On FPAR reduce production loption(separated_nonempty_list(VIRG,expressao)) -> 

State 20:
expressao -> MENOS . termo [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On ID shift to state 18
-- On variavel shift to state 21
-- On termo shift to state 68
-- On literal shift to state 27
-- On chamada_funcao shift to state 28

State 21:
chamada_funcao -> variavel . ATRIB ID APAR funcao_args FPAR option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
termo -> variavel . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On ATRIB shift to state 22
-- On WHILE reduce production termo -> variavel 
-- On VIRG reduce production termo -> variavel 
-- On VAR reduce production termo -> variavel 
-- On SWITCH reduce production termo -> variavel 
-- On RETURN reduce production termo -> variavel 
-- On POT reduce production termo -> variavel 
-- On PONTOVIRG reduce production termo -> variavel 
-- On OR reduce production termo -> variavel 
-- On MULTATRIB reduce production termo -> variavel 
-- On MULT reduce production termo -> variavel 
-- On MOD reduce production termo -> variavel 
-- On MENOSATRIB reduce production termo -> variavel 
-- On MENOS reduce production termo -> variavel 
-- On MENORIGUAL reduce production termo -> variavel 
-- On MENOR reduce production termo -> variavel 
-- On MAISATRIB reduce production termo -> variavel 
-- On MAIS reduce production termo -> variavel 
-- On MAIORIGUAL reduce production termo -> variavel 
-- On MAIOR reduce production termo -> variavel 
-- On LITSTRING reduce production termo -> variavel 
-- On LITINT reduce production termo -> variavel 
-- On LITFLOAT reduce production termo -> variavel 
-- On LITCHAR reduce production termo -> variavel 
-- On LITBOOL reduce production termo -> variavel 
-- On LET reduce production termo -> variavel 
-- On INCR reduce production termo -> variavel 
-- On IGUAL reduce production termo -> variavel 
-- On IF reduce production termo -> variavel 
-- On ID reduce production termo -> variavel 
-- On FUNCTION reduce production termo -> variavel 
-- On FPAR reduce production termo -> variavel 
-- On FOR reduce production termo -> variavel 
-- On FCOLCH reduce production termo -> variavel 
-- On FCHAVE reduce production termo -> variavel 
-- On EOF reduce production termo -> variavel 
-- On ELSE reduce production termo -> variavel 
-- On DO reduce production termo -> variavel 
-- On DIV reduce production termo -> variavel 
-- On DIF reduce production termo -> variavel 
-- On DECR reduce production termo -> variavel 
-- On CONST reduce production termo -> variavel 
-- On CONSOLELOG reduce production termo -> variavel 
-- On BREAK reduce production termo -> variavel 
-- On AND reduce production termo -> variavel 

State 22:
chamada_funcao -> variavel ATRIB . ID APAR funcao_args FPAR option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On ID shift to state 23

State 23:
chamada_funcao -> variavel ATRIB ID . APAR funcao_args FPAR option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On APAR shift to state 24

State 24:
chamada_funcao -> variavel ATRIB ID APAR . funcao_args FPAR option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On separated_nonempty_list(VIRG,expressao) shift to state 58
-- On loption(separated_nonempty_list(VIRG,expressao)) shift to state 59
-- On literal shift to state 27
-- On funcao_args shift to state 60
-- On expressao shift to state 65
-- On chamada_funcao shift to state 28
-- On FPAR reduce production loption(separated_nonempty_list(VIRG,expressao)) -> 

State 25:
expressao -> MAIS . termo [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On ID shift to state 18
-- On variavel shift to state 21
-- On termo shift to state 26
-- On literal shift to state 27
-- On chamada_funcao shift to state 28

State 26:
expressao -> MAIS termo . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production expressao -> MAIS termo 
-- On VIRG reduce production expressao -> MAIS termo 
-- On VAR reduce production expressao -> MAIS termo 
-- On SWITCH reduce production expressao -> MAIS termo 
-- On RETURN reduce production expressao -> MAIS termo 
-- On POT reduce production expressao -> MAIS termo 
-- On PONTOVIRG reduce production expressao -> MAIS termo 
-- On OR reduce production expressao -> MAIS termo 
-- On MULTATRIB reduce production expressao -> MAIS termo 
-- On MULT reduce production expressao -> MAIS termo 
-- On MOD reduce production expressao -> MAIS termo 
-- On MENOSATRIB reduce production expressao -> MAIS termo 
-- On MENOS reduce production expressao -> MAIS termo 
-- On MENORIGUAL reduce production expressao -> MAIS termo 
-- On MENOR reduce production expressao -> MAIS termo 
-- On MAISATRIB reduce production expressao -> MAIS termo 
-- On MAIS reduce production expressao -> MAIS termo 
-- On MAIORIGUAL reduce production expressao -> MAIS termo 
-- On MAIOR reduce production expressao -> MAIS termo 
-- On LITSTRING reduce production expressao -> MAIS termo 
-- On LITINT reduce production expressao -> MAIS termo 
-- On LITFLOAT reduce production expressao -> MAIS termo 
-- On LITCHAR reduce production expressao -> MAIS termo 
-- On LITBOOL reduce production expressao -> MAIS termo 
-- On LET reduce production expressao -> MAIS termo 
-- On INCR reduce production expressao -> MAIS termo 
-- On IGUAL reduce production expressao -> MAIS termo 
-- On IF reduce production expressao -> MAIS termo 
-- On ID reduce production expressao -> MAIS termo 
-- On FUNCTION reduce production expressao -> MAIS termo 
-- On FPAR reduce production expressao -> MAIS termo 
-- On FOR reduce production expressao -> MAIS termo 
-- On FCOLCH reduce production expressao -> MAIS termo 
-- On FCHAVE reduce production expressao -> MAIS termo 
-- On EOF reduce production expressao -> MAIS termo 
-- On ELSE reduce production expressao -> MAIS termo 
-- On DO reduce production expressao -> MAIS termo 
-- On DIV reduce production expressao -> MAIS termo 
-- On DIF reduce production expressao -> MAIS termo 
-- On DECR reduce production expressao -> MAIS termo 
-- On CONST reduce production expressao -> MAIS termo 
-- On CONSOLELOG reduce production expressao -> MAIS termo 
-- On BREAK reduce production expressao -> MAIS termo 
-- On AND reduce production expressao -> MAIS termo 

State 27:
termo -> literal . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production termo -> literal 
-- On VIRG reduce production termo -> literal 
-- On VAR reduce production termo -> literal 
-- On SWITCH reduce production termo -> literal 
-- On RETURN reduce production termo -> literal 
-- On POT reduce production termo -> literal 
-- On PONTOVIRG reduce production termo -> literal 
-- On OR reduce production termo -> literal 
-- On MULTATRIB reduce production termo -> literal 
-- On MULT reduce production termo -> literal 
-- On MOD reduce production termo -> literal 
-- On MENOSATRIB reduce production termo -> literal 
-- On MENOS reduce production termo -> literal 
-- On MENORIGUAL reduce production termo -> literal 
-- On MENOR reduce production termo -> literal 
-- On MAISATRIB reduce production termo -> literal 
-- On MAIS reduce production termo -> literal 
-- On MAIORIGUAL reduce production termo -> literal 
-- On MAIOR reduce production termo -> literal 
-- On LITSTRING reduce production termo -> literal 
-- On LITINT reduce production termo -> literal 
-- On LITFLOAT reduce production termo -> literal 
-- On LITCHAR reduce production termo -> literal 
-- On LITBOOL reduce production termo -> literal 
-- On LET reduce production termo -> literal 
-- On INCR reduce production termo -> literal 
-- On IGUAL reduce production termo -> literal 
-- On IF reduce production termo -> literal 
-- On ID reduce production termo -> literal 
-- On FUNCTION reduce production termo -> literal 
-- On FPAR reduce production termo -> literal 
-- On FOR reduce production termo -> literal 
-- On FCOLCH reduce production termo -> literal 
-- On FCHAVE reduce production termo -> literal 
-- On EOF reduce production termo -> literal 
-- On ELSE reduce production termo -> literal 
-- On DO reduce production termo -> literal 
-- On DIV reduce production termo -> literal 
-- On DIF reduce production termo -> literal 
-- On DECR reduce production termo -> literal 
-- On CONST reduce production termo -> literal 
-- On CONSOLELOG reduce production termo -> literal 
-- On BREAK reduce production termo -> literal 
-- On AND reduce production termo -> literal 

State 28:
termo -> chamada_funcao . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production termo -> chamada_funcao 
-- On VIRG reduce production termo -> chamada_funcao 
-- On VAR reduce production termo -> chamada_funcao 
-- On SWITCH reduce production termo -> chamada_funcao 
-- On RETURN reduce production termo -> chamada_funcao 
-- On POT reduce production termo -> chamada_funcao 
-- On PONTOVIRG reduce production termo -> chamada_funcao 
-- On OR reduce production termo -> chamada_funcao 
-- On MULTATRIB reduce production termo -> chamada_funcao 
-- On MULT reduce production termo -> chamada_funcao 
-- On MOD reduce production termo -> chamada_funcao 
-- On MENOSATRIB reduce production termo -> chamada_funcao 
-- On MENOS reduce production termo -> chamada_funcao 
-- On MENORIGUAL reduce production termo -> chamada_funcao 
-- On MENOR reduce production termo -> chamada_funcao 
-- On MAISATRIB reduce production termo -> chamada_funcao 
-- On MAIS reduce production termo -> chamada_funcao 
-- On MAIORIGUAL reduce production termo -> chamada_funcao 
-- On MAIOR reduce production termo -> chamada_funcao 
-- On LITSTRING reduce production termo -> chamada_funcao 
-- On LITINT reduce production termo -> chamada_funcao 
-- On LITFLOAT reduce production termo -> chamada_funcao 
-- On LITCHAR reduce production termo -> chamada_funcao 
-- On LITBOOL reduce production termo -> chamada_funcao 
-- On LET reduce production termo -> chamada_funcao 
-- On INCR reduce production termo -> chamada_funcao 
-- On IGUAL reduce production termo -> chamada_funcao 
-- On IF reduce production termo -> chamada_funcao 
-- On ID reduce production termo -> chamada_funcao 
-- On FUNCTION reduce production termo -> chamada_funcao 
-- On FPAR reduce production termo -> chamada_funcao 
-- On FOR reduce production termo -> chamada_funcao 
-- On FCOLCH reduce production termo -> chamada_funcao 
-- On FCHAVE reduce production termo -> chamada_funcao 
-- On EOF reduce production termo -> chamada_funcao 
-- On ELSE reduce production termo -> chamada_funcao 
-- On DO reduce production termo -> chamada_funcao 
-- On DIV reduce production termo -> chamada_funcao 
-- On DIF reduce production termo -> chamada_funcao 
-- On DECR reduce production termo -> chamada_funcao 
-- On CONST reduce production termo -> chamada_funcao 
-- On CONSOLELOG reduce production termo -> chamada_funcao 
-- On BREAK reduce production termo -> chamada_funcao 
-- On AND reduce production termo -> chamada_funcao 

State 29:
expressao -> INCR . termo [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On ID shift to state 18
-- On variavel shift to state 21
-- On termo shift to state 30
-- On literal shift to state 27
-- On chamada_funcao shift to state 28

State 30:
expressao -> INCR termo . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production expressao -> INCR termo 
-- On VIRG reduce production expressao -> INCR termo 
-- On VAR reduce production expressao -> INCR termo 
-- On SWITCH reduce production expressao -> INCR termo 
-- On RETURN reduce production expressao -> INCR termo 
-- On POT reduce production expressao -> INCR termo 
-- On PONTOVIRG reduce production expressao -> INCR termo 
-- On OR reduce production expressao -> INCR termo 
-- On MULTATRIB reduce production expressao -> INCR termo 
-- On MULT reduce production expressao -> INCR termo 
-- On MOD reduce production expressao -> INCR termo 
-- On MENOSATRIB reduce production expressao -> INCR termo 
-- On MENOS reduce production expressao -> INCR termo 
-- On MENORIGUAL reduce production expressao -> INCR termo 
-- On MENOR reduce production expressao -> INCR termo 
-- On MAISATRIB reduce production expressao -> INCR termo 
-- On MAIS reduce production expressao -> INCR termo 
-- On MAIORIGUAL reduce production expressao -> INCR termo 
-- On MAIOR reduce production expressao -> INCR termo 
-- On LITSTRING reduce production expressao -> INCR termo 
-- On LITINT reduce production expressao -> INCR termo 
-- On LITFLOAT reduce production expressao -> INCR termo 
-- On LITCHAR reduce production expressao -> INCR termo 
-- On LITBOOL reduce production expressao -> INCR termo 
-- On LET reduce production expressao -> INCR termo 
-- On INCR reduce production expressao -> INCR termo 
-- On IGUAL reduce production expressao -> INCR termo 
-- On IF reduce production expressao -> INCR termo 
-- On ID reduce production expressao -> INCR termo 
-- On FUNCTION reduce production expressao -> INCR termo 
-- On FPAR reduce production expressao -> INCR termo 
-- On FOR reduce production expressao -> INCR termo 
-- On FCOLCH reduce production expressao -> INCR termo 
-- On FCHAVE reduce production expressao -> INCR termo 
-- On EOF reduce production expressao -> INCR termo 
-- On ELSE reduce production expressao -> INCR termo 
-- On DO reduce production expressao -> INCR termo 
-- On DIV reduce production expressao -> INCR termo 
-- On DIF reduce production expressao -> INCR termo 
-- On DECR reduce production expressao -> INCR termo 
-- On CONST reduce production expressao -> INCR termo 
-- On CONSOLELOG reduce production expressao -> INCR termo 
-- On BREAK reduce production expressao -> INCR termo 
-- On AND reduce production expressao -> INCR termo 

State 31:
expressao -> DECR . termo [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On ID shift to state 18
-- On variavel shift to state 21
-- On termo shift to state 32
-- On literal shift to state 27
-- On chamada_funcao shift to state 28

State 32:
expressao -> DECR termo . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production expressao -> DECR termo 
-- On VIRG reduce production expressao -> DECR termo 
-- On VAR reduce production expressao -> DECR termo 
-- On SWITCH reduce production expressao -> DECR termo 
-- On RETURN reduce production expressao -> DECR termo 
-- On POT reduce production expressao -> DECR termo 
-- On PONTOVIRG reduce production expressao -> DECR termo 
-- On OR reduce production expressao -> DECR termo 
-- On MULTATRIB reduce production expressao -> DECR termo 
-- On MULT reduce production expressao -> DECR termo 
-- On MOD reduce production expressao -> DECR termo 
-- On MENOSATRIB reduce production expressao -> DECR termo 
-- On MENOS reduce production expressao -> DECR termo 
-- On MENORIGUAL reduce production expressao -> DECR termo 
-- On MENOR reduce production expressao -> DECR termo 
-- On MAISATRIB reduce production expressao -> DECR termo 
-- On MAIS reduce production expressao -> DECR termo 
-- On MAIORIGUAL reduce production expressao -> DECR termo 
-- On MAIOR reduce production expressao -> DECR termo 
-- On LITSTRING reduce production expressao -> DECR termo 
-- On LITINT reduce production expressao -> DECR termo 
-- On LITFLOAT reduce production expressao -> DECR termo 
-- On LITCHAR reduce production expressao -> DECR termo 
-- On LITBOOL reduce production expressao -> DECR termo 
-- On LET reduce production expressao -> DECR termo 
-- On INCR reduce production expressao -> DECR termo 
-- On IGUAL reduce production expressao -> DECR termo 
-- On IF reduce production expressao -> DECR termo 
-- On ID reduce production expressao -> DECR termo 
-- On FUNCTION reduce production expressao -> DECR termo 
-- On FPAR reduce production expressao -> DECR termo 
-- On FOR reduce production expressao -> DECR termo 
-- On FCOLCH reduce production expressao -> DECR termo 
-- On FCHAVE reduce production expressao -> DECR termo 
-- On EOF reduce production expressao -> DECR termo 
-- On ELSE reduce production expressao -> DECR termo 
-- On DO reduce production expressao -> DECR termo 
-- On DIV reduce production expressao -> DECR termo 
-- On DIF reduce production expressao -> DECR termo 
-- On DECR reduce production expressao -> DECR termo 
-- On CONST reduce production expressao -> DECR termo 
-- On CONSOLELOG reduce production expressao -> DECR termo 
-- On BREAK reduce production expressao -> DECR termo 
-- On AND reduce production expressao -> DECR termo 

State 33:
expressao -> APAR . expressao FPAR [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 37
-- On chamada_funcao shift to state 28

State 34:
expressao -> termo . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
expressao -> termo . DECR [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
expressao -> termo . INCR [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On INCR shift to state 35
-- On DECR shift to state 36
-- On WHILE reduce production expressao -> termo 
-- On VIRG reduce production expressao -> termo 
-- On VAR reduce production expressao -> termo 
-- On SWITCH reduce production expressao -> termo 
-- On RETURN reduce production expressao -> termo 
-- On POT reduce production expressao -> termo 
-- On PONTOVIRG reduce production expressao -> termo 
-- On OR reduce production expressao -> termo 
-- On MULTATRIB reduce production expressao -> termo 
-- On MULT reduce production expressao -> termo 
-- On MOD reduce production expressao -> termo 
-- On MENOSATRIB reduce production expressao -> termo 
-- On MENOS reduce production expressao -> termo 
-- On MENORIGUAL reduce production expressao -> termo 
-- On MENOR reduce production expressao -> termo 
-- On MAISATRIB reduce production expressao -> termo 
-- On MAIS reduce production expressao -> termo 
-- On MAIORIGUAL reduce production expressao -> termo 
-- On MAIOR reduce production expressao -> termo 
-- On LITSTRING reduce production expressao -> termo 
-- On LITINT reduce production expressao -> termo 
-- On LITFLOAT reduce production expressao -> termo 
-- On LITCHAR reduce production expressao -> termo 
-- On LITBOOL reduce production expressao -> termo 
-- On LET reduce production expressao -> termo 
-- On INCR reduce production expressao -> termo 
-- On IGUAL reduce production expressao -> termo 
-- On IF reduce production expressao -> termo 
-- On ID reduce production expressao -> termo 
-- On FUNCTION reduce production expressao -> termo 
-- On FPAR reduce production expressao -> termo 
-- On FOR reduce production expressao -> termo 
-- On FCOLCH reduce production expressao -> termo 
-- On FCHAVE reduce production expressao -> termo 
-- On EOF reduce production expressao -> termo 
-- On ELSE reduce production expressao -> termo 
-- On DO reduce production expressao -> termo 
-- On DIV reduce production expressao -> termo 
-- On DIF reduce production expressao -> termo 
-- On DECR reduce production expressao -> termo 
-- On CONST reduce production expressao -> termo 
-- On CONSOLELOG reduce production expressao -> termo 
-- On BREAK reduce production expressao -> termo 
-- On AND reduce production expressao -> termo 
** Conflict on INCR DECR

State 35:
expressao -> termo INCR . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production expressao -> termo INCR 
-- On VIRG reduce production expressao -> termo INCR 
-- On VAR reduce production expressao -> termo INCR 
-- On SWITCH reduce production expressao -> termo INCR 
-- On RETURN reduce production expressao -> termo INCR 
-- On POT reduce production expressao -> termo INCR 
-- On PONTOVIRG reduce production expressao -> termo INCR 
-- On OR reduce production expressao -> termo INCR 
-- On MULTATRIB reduce production expressao -> termo INCR 
-- On MULT reduce production expressao -> termo INCR 
-- On MOD reduce production expressao -> termo INCR 
-- On MENOSATRIB reduce production expressao -> termo INCR 
-- On MENOS reduce production expressao -> termo INCR 
-- On MENORIGUAL reduce production expressao -> termo INCR 
-- On MENOR reduce production expressao -> termo INCR 
-- On MAISATRIB reduce production expressao -> termo INCR 
-- On MAIS reduce production expressao -> termo INCR 
-- On MAIORIGUAL reduce production expressao -> termo INCR 
-- On MAIOR reduce production expressao -> termo INCR 
-- On LITSTRING reduce production expressao -> termo INCR 
-- On LITINT reduce production expressao -> termo INCR 
-- On LITFLOAT reduce production expressao -> termo INCR 
-- On LITCHAR reduce production expressao -> termo INCR 
-- On LITBOOL reduce production expressao -> termo INCR 
-- On LET reduce production expressao -> termo INCR 
-- On INCR reduce production expressao -> termo INCR 
-- On IGUAL reduce production expressao -> termo INCR 
-- On IF reduce production expressao -> termo INCR 
-- On ID reduce production expressao -> termo INCR 
-- On FUNCTION reduce production expressao -> termo INCR 
-- On FPAR reduce production expressao -> termo INCR 
-- On FOR reduce production expressao -> termo INCR 
-- On FCOLCH reduce production expressao -> termo INCR 
-- On FCHAVE reduce production expressao -> termo INCR 
-- On EOF reduce production expressao -> termo INCR 
-- On ELSE reduce production expressao -> termo INCR 
-- On DO reduce production expressao -> termo INCR 
-- On DIV reduce production expressao -> termo INCR 
-- On DIF reduce production expressao -> termo INCR 
-- On DECR reduce production expressao -> termo INCR 
-- On CONST reduce production expressao -> termo INCR 
-- On CONSOLELOG reduce production expressao -> termo INCR 
-- On BREAK reduce production expressao -> termo INCR 
-- On AND reduce production expressao -> termo INCR 

State 36:
expressao -> termo DECR . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production expressao -> termo DECR 
-- On VIRG reduce production expressao -> termo DECR 
-- On VAR reduce production expressao -> termo DECR 
-- On SWITCH reduce production expressao -> termo DECR 
-- On RETURN reduce production expressao -> termo DECR 
-- On POT reduce production expressao -> termo DECR 
-- On PONTOVIRG reduce production expressao -> termo DECR 
-- On OR reduce production expressao -> termo DECR 
-- On MULTATRIB reduce production expressao -> termo DECR 
-- On MULT reduce production expressao -> termo DECR 
-- On MOD reduce production expressao -> termo DECR 
-- On MENOSATRIB reduce production expressao -> termo DECR 
-- On MENOS reduce production expressao -> termo DECR 
-- On MENORIGUAL reduce production expressao -> termo DECR 
-- On MENOR reduce production expressao -> termo DECR 
-- On MAISATRIB reduce production expressao -> termo DECR 
-- On MAIS reduce production expressao -> termo DECR 
-- On MAIORIGUAL reduce production expressao -> termo DECR 
-- On MAIOR reduce production expressao -> termo DECR 
-- On LITSTRING reduce production expressao -> termo DECR 
-- On LITINT reduce production expressao -> termo DECR 
-- On LITFLOAT reduce production expressao -> termo DECR 
-- On LITCHAR reduce production expressao -> termo DECR 
-- On LITBOOL reduce production expressao -> termo DECR 
-- On LET reduce production expressao -> termo DECR 
-- On INCR reduce production expressao -> termo DECR 
-- On IGUAL reduce production expressao -> termo DECR 
-- On IF reduce production expressao -> termo DECR 
-- On ID reduce production expressao -> termo DECR 
-- On FUNCTION reduce production expressao -> termo DECR 
-- On FPAR reduce production expressao -> termo DECR 
-- On FOR reduce production expressao -> termo DECR 
-- On FCOLCH reduce production expressao -> termo DECR 
-- On FCHAVE reduce production expressao -> termo DECR 
-- On EOF reduce production expressao -> termo DECR 
-- On ELSE reduce production expressao -> termo DECR 
-- On DO reduce production expressao -> termo DECR 
-- On DIV reduce production expressao -> termo DECR 
-- On DIF reduce production expressao -> termo DECR 
-- On DECR reduce production expressao -> termo DECR 
-- On CONST reduce production expressao -> termo DECR 
-- On CONSOLELOG reduce production expressao -> termo DECR 
-- On BREAK reduce production expressao -> termo DECR 
-- On AND reduce production expressao -> termo DECR 

State 37:
expressao -> expressao . operador expressao [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF AND ]
expressao -> APAR expressao . FPAR [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On FPAR shift to state 52
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 38:
operador -> POT . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> POT 
-- On MENOS reduce production operador -> POT 
-- On MAIS reduce production operador -> POT 
-- On LITSTRING reduce production operador -> POT 
-- On LITINT reduce production operador -> POT 
-- On LITFLOAT reduce production operador -> POT 
-- On LITCHAR reduce production operador -> POT 
-- On LITBOOL reduce production operador -> POT 
-- On INCR reduce production operador -> POT 
-- On ID reduce production operador -> POT 
-- On DECR reduce production operador -> POT 
-- On APAR reduce production operador -> POT 

State 39:
operador -> OR . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> OR 
-- On MENOS reduce production operador -> OR 
-- On MAIS reduce production operador -> OR 
-- On LITSTRING reduce production operador -> OR 
-- On LITINT reduce production operador -> OR 
-- On LITFLOAT reduce production operador -> OR 
-- On LITCHAR reduce production operador -> OR 
-- On LITBOOL reduce production operador -> OR 
-- On INCR reduce production operador -> OR 
-- On ID reduce production operador -> OR 
-- On DECR reduce production operador -> OR 
-- On APAR reduce production operador -> OR 

State 40:
operador -> MULTATRIB . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MULTATRIB 
-- On MENOS reduce production operador -> MULTATRIB 
-- On MAIS reduce production operador -> MULTATRIB 
-- On LITSTRING reduce production operador -> MULTATRIB 
-- On LITINT reduce production operador -> MULTATRIB 
-- On LITFLOAT reduce production operador -> MULTATRIB 
-- On LITCHAR reduce production operador -> MULTATRIB 
-- On LITBOOL reduce production operador -> MULTATRIB 
-- On INCR reduce production operador -> MULTATRIB 
-- On ID reduce production operador -> MULTATRIB 
-- On DECR reduce production operador -> MULTATRIB 
-- On APAR reduce production operador -> MULTATRIB 

State 41:
operador -> MULT . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MULT 
-- On MENOS reduce production operador -> MULT 
-- On MAIS reduce production operador -> MULT 
-- On LITSTRING reduce production operador -> MULT 
-- On LITINT reduce production operador -> MULT 
-- On LITFLOAT reduce production operador -> MULT 
-- On LITCHAR reduce production operador -> MULT 
-- On LITBOOL reduce production operador -> MULT 
-- On INCR reduce production operador -> MULT 
-- On ID reduce production operador -> MULT 
-- On DECR reduce production operador -> MULT 
-- On APAR reduce production operador -> MULT 

State 42:
operador -> MOD . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MOD 
-- On MENOS reduce production operador -> MOD 
-- On MAIS reduce production operador -> MOD 
-- On LITSTRING reduce production operador -> MOD 
-- On LITINT reduce production operador -> MOD 
-- On LITFLOAT reduce production operador -> MOD 
-- On LITCHAR reduce production operador -> MOD 
-- On LITBOOL reduce production operador -> MOD 
-- On INCR reduce production operador -> MOD 
-- On ID reduce production operador -> MOD 
-- On DECR reduce production operador -> MOD 
-- On APAR reduce production operador -> MOD 

State 43:
operador -> MENOSATRIB . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MENOSATRIB 
-- On MENOS reduce production operador -> MENOSATRIB 
-- On MAIS reduce production operador -> MENOSATRIB 
-- On LITSTRING reduce production operador -> MENOSATRIB 
-- On LITINT reduce production operador -> MENOSATRIB 
-- On LITFLOAT reduce production operador -> MENOSATRIB 
-- On LITCHAR reduce production operador -> MENOSATRIB 
-- On LITBOOL reduce production operador -> MENOSATRIB 
-- On INCR reduce production operador -> MENOSATRIB 
-- On ID reduce production operador -> MENOSATRIB 
-- On DECR reduce production operador -> MENOSATRIB 
-- On APAR reduce production operador -> MENOSATRIB 

State 44:
operador -> MENOS . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MENOS 
-- On MENOS reduce production operador -> MENOS 
-- On MAIS reduce production operador -> MENOS 
-- On LITSTRING reduce production operador -> MENOS 
-- On LITINT reduce production operador -> MENOS 
-- On LITFLOAT reduce production operador -> MENOS 
-- On LITCHAR reduce production operador -> MENOS 
-- On LITBOOL reduce production operador -> MENOS 
-- On INCR reduce production operador -> MENOS 
-- On ID reduce production operador -> MENOS 
-- On DECR reduce production operador -> MENOS 
-- On APAR reduce production operador -> MENOS 

State 45:
operador -> MENORIGUAL . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MENORIGUAL 
-- On MENOS reduce production operador -> MENORIGUAL 
-- On MAIS reduce production operador -> MENORIGUAL 
-- On LITSTRING reduce production operador -> MENORIGUAL 
-- On LITINT reduce production operador -> MENORIGUAL 
-- On LITFLOAT reduce production operador -> MENORIGUAL 
-- On LITCHAR reduce production operador -> MENORIGUAL 
-- On LITBOOL reduce production operador -> MENORIGUAL 
-- On INCR reduce production operador -> MENORIGUAL 
-- On ID reduce production operador -> MENORIGUAL 
-- On DECR reduce production operador -> MENORIGUAL 
-- On APAR reduce production operador -> MENORIGUAL 

State 46:
operador -> MENOR . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MENOR 
-- On MENOS reduce production operador -> MENOR 
-- On MAIS reduce production operador -> MENOR 
-- On LITSTRING reduce production operador -> MENOR 
-- On LITINT reduce production operador -> MENOR 
-- On LITFLOAT reduce production operador -> MENOR 
-- On LITCHAR reduce production operador -> MENOR 
-- On LITBOOL reduce production operador -> MENOR 
-- On INCR reduce production operador -> MENOR 
-- On ID reduce production operador -> MENOR 
-- On DECR reduce production operador -> MENOR 
-- On APAR reduce production operador -> MENOR 

State 47:
operador -> MAISATRIB . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MAISATRIB 
-- On MENOS reduce production operador -> MAISATRIB 
-- On MAIS reduce production operador -> MAISATRIB 
-- On LITSTRING reduce production operador -> MAISATRIB 
-- On LITINT reduce production operador -> MAISATRIB 
-- On LITFLOAT reduce production operador -> MAISATRIB 
-- On LITCHAR reduce production operador -> MAISATRIB 
-- On LITBOOL reduce production operador -> MAISATRIB 
-- On INCR reduce production operador -> MAISATRIB 
-- On ID reduce production operador -> MAISATRIB 
-- On DECR reduce production operador -> MAISATRIB 
-- On APAR reduce production operador -> MAISATRIB 

State 48:
operador -> MAIS . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MAIS 
-- On MENOS reduce production operador -> MAIS 
-- On MAIS reduce production operador -> MAIS 
-- On LITSTRING reduce production operador -> MAIS 
-- On LITINT reduce production operador -> MAIS 
-- On LITFLOAT reduce production operador -> MAIS 
-- On LITCHAR reduce production operador -> MAIS 
-- On LITBOOL reduce production operador -> MAIS 
-- On INCR reduce production operador -> MAIS 
-- On ID reduce production operador -> MAIS 
-- On DECR reduce production operador -> MAIS 
-- On APAR reduce production operador -> MAIS 

State 49:
operador -> MAIORIGUAL . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MAIORIGUAL 
-- On MENOS reduce production operador -> MAIORIGUAL 
-- On MAIS reduce production operador -> MAIORIGUAL 
-- On LITSTRING reduce production operador -> MAIORIGUAL 
-- On LITINT reduce production operador -> MAIORIGUAL 
-- On LITFLOAT reduce production operador -> MAIORIGUAL 
-- On LITCHAR reduce production operador -> MAIORIGUAL 
-- On LITBOOL reduce production operador -> MAIORIGUAL 
-- On INCR reduce production operador -> MAIORIGUAL 
-- On ID reduce production operador -> MAIORIGUAL 
-- On DECR reduce production operador -> MAIORIGUAL 
-- On APAR reduce production operador -> MAIORIGUAL 

State 50:
operador -> MAIOR . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> MAIOR 
-- On MENOS reduce production operador -> MAIOR 
-- On MAIS reduce production operador -> MAIOR 
-- On LITSTRING reduce production operador -> MAIOR 
-- On LITINT reduce production operador -> MAIOR 
-- On LITFLOAT reduce production operador -> MAIOR 
-- On LITCHAR reduce production operador -> MAIOR 
-- On LITBOOL reduce production operador -> MAIOR 
-- On INCR reduce production operador -> MAIOR 
-- On ID reduce production operador -> MAIOR 
-- On DECR reduce production operador -> MAIOR 
-- On APAR reduce production operador -> MAIOR 

State 51:
operador -> IGUAL . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> IGUAL 
-- On MENOS reduce production operador -> IGUAL 
-- On MAIS reduce production operador -> IGUAL 
-- On LITSTRING reduce production operador -> IGUAL 
-- On LITINT reduce production operador -> IGUAL 
-- On LITFLOAT reduce production operador -> IGUAL 
-- On LITCHAR reduce production operador -> IGUAL 
-- On LITBOOL reduce production operador -> IGUAL 
-- On INCR reduce production operador -> IGUAL 
-- On ID reduce production operador -> IGUAL 
-- On DECR reduce production operador -> IGUAL 
-- On APAR reduce production operador -> IGUAL 

State 52:
expressao -> APAR expressao FPAR . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production expressao -> APAR expressao FPAR 
-- On VIRG reduce production expressao -> APAR expressao FPAR 
-- On VAR reduce production expressao -> APAR expressao FPAR 
-- On SWITCH reduce production expressao -> APAR expressao FPAR 
-- On RETURN reduce production expressao -> APAR expressao FPAR 
-- On POT reduce production expressao -> APAR expressao FPAR 
-- On PONTOVIRG reduce production expressao -> APAR expressao FPAR 
-- On OR reduce production expressao -> APAR expressao FPAR 
-- On MULTATRIB reduce production expressao -> APAR expressao FPAR 
-- On MULT reduce production expressao -> APAR expressao FPAR 
-- On MOD reduce production expressao -> APAR expressao FPAR 
-- On MENOSATRIB reduce production expressao -> APAR expressao FPAR 
-- On MENOS reduce production expressao -> APAR expressao FPAR 
-- On MENORIGUAL reduce production expressao -> APAR expressao FPAR 
-- On MENOR reduce production expressao -> APAR expressao FPAR 
-- On MAISATRIB reduce production expressao -> APAR expressao FPAR 
-- On MAIS reduce production expressao -> APAR expressao FPAR 
-- On MAIORIGUAL reduce production expressao -> APAR expressao FPAR 
-- On MAIOR reduce production expressao -> APAR expressao FPAR 
-- On LITSTRING reduce production expressao -> APAR expressao FPAR 
-- On LITINT reduce production expressao -> APAR expressao FPAR 
-- On LITFLOAT reduce production expressao -> APAR expressao FPAR 
-- On LITCHAR reduce production expressao -> APAR expressao FPAR 
-- On LITBOOL reduce production expressao -> APAR expressao FPAR 
-- On LET reduce production expressao -> APAR expressao FPAR 
-- On INCR reduce production expressao -> APAR expressao FPAR 
-- On IGUAL reduce production expressao -> APAR expressao FPAR 
-- On IF reduce production expressao -> APAR expressao FPAR 
-- On ID reduce production expressao -> APAR expressao FPAR 
-- On FUNCTION reduce production expressao -> APAR expressao FPAR 
-- On FPAR reduce production expressao -> APAR expressao FPAR 
-- On FOR reduce production expressao -> APAR expressao FPAR 
-- On FCOLCH reduce production expressao -> APAR expressao FPAR 
-- On FCHAVE reduce production expressao -> APAR expressao FPAR 
-- On EOF reduce production expressao -> APAR expressao FPAR 
-- On ELSE reduce production expressao -> APAR expressao FPAR 
-- On DO reduce production expressao -> APAR expressao FPAR 
-- On DIV reduce production expressao -> APAR expressao FPAR 
-- On DIF reduce production expressao -> APAR expressao FPAR 
-- On DECR reduce production expressao -> APAR expressao FPAR 
-- On CONST reduce production expressao -> APAR expressao FPAR 
-- On CONSOLELOG reduce production expressao -> APAR expressao FPAR 
-- On BREAK reduce production expressao -> APAR expressao FPAR 
-- On AND reduce production expressao -> APAR expressao FPAR 

State 53:
operador -> DIV . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> DIV 
-- On MENOS reduce production operador -> DIV 
-- On MAIS reduce production operador -> DIV 
-- On LITSTRING reduce production operador -> DIV 
-- On LITINT reduce production operador -> DIV 
-- On LITFLOAT reduce production operador -> DIV 
-- On LITCHAR reduce production operador -> DIV 
-- On LITBOOL reduce production operador -> DIV 
-- On INCR reduce production operador -> DIV 
-- On ID reduce production operador -> DIV 
-- On DECR reduce production operador -> DIV 
-- On APAR reduce production operador -> DIV 

State 54:
operador -> DIF . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> DIF 
-- On MENOS reduce production operador -> DIF 
-- On MAIS reduce production operador -> DIF 
-- On LITSTRING reduce production operador -> DIF 
-- On LITINT reduce production operador -> DIF 
-- On LITFLOAT reduce production operador -> DIF 
-- On LITCHAR reduce production operador -> DIF 
-- On LITBOOL reduce production operador -> DIF 
-- On INCR reduce production operador -> DIF 
-- On ID reduce production operador -> DIF 
-- On DECR reduce production operador -> DIF 
-- On APAR reduce production operador -> DIF 

State 55:
operador -> AND . [ NOT MENOS MAIS LITSTRING LITINT LITFLOAT LITCHAR LITBOOL INCR ID DECR APAR ]
-- On NOT reduce production operador -> AND 
-- On MENOS reduce production operador -> AND 
-- On MAIS reduce production operador -> AND 
-- On LITSTRING reduce production operador -> AND 
-- On LITINT reduce production operador -> AND 
-- On LITFLOAT reduce production operador -> AND 
-- On LITCHAR reduce production operador -> AND 
-- On LITBOOL reduce production operador -> AND 
-- On INCR reduce production operador -> AND 
-- On ID reduce production operador -> AND 
-- On DECR reduce production operador -> AND 
-- On APAR reduce production operador -> AND 

State 56:
expressao -> expressao operador . expressao [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 57
-- On chamada_funcao shift to state 28

State 57:
expressao -> expressao . operador expressao [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
expressao -> expressao operador expressao . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56
-- On WHILE reduce production expressao -> expressao operador expressao 
-- On VIRG reduce production expressao -> expressao operador expressao 
-- On VAR reduce production expressao -> expressao operador expressao 
-- On SWITCH reduce production expressao -> expressao operador expressao 
-- On RETURN reduce production expressao -> expressao operador expressao 
-- On POT reduce production expressao -> expressao operador expressao 
-- On PONTOVIRG reduce production expressao -> expressao operador expressao 
-- On OR reduce production expressao -> expressao operador expressao 
-- On MULTATRIB reduce production expressao -> expressao operador expressao 
-- On MULT reduce production expressao -> expressao operador expressao 
-- On MOD reduce production expressao -> expressao operador expressao 
-- On MENOSATRIB reduce production expressao -> expressao operador expressao 
-- On MENOS reduce production expressao -> expressao operador expressao 
-- On MENORIGUAL reduce production expressao -> expressao operador expressao 
-- On MENOR reduce production expressao -> expressao operador expressao 
-- On MAISATRIB reduce production expressao -> expressao operador expressao 
-- On MAIS reduce production expressao -> expressao operador expressao 
-- On MAIORIGUAL reduce production expressao -> expressao operador expressao 
-- On MAIOR reduce production expressao -> expressao operador expressao 
-- On LITSTRING reduce production expressao -> expressao operador expressao 
-- On LITINT reduce production expressao -> expressao operador expressao 
-- On LITFLOAT reduce production expressao -> expressao operador expressao 
-- On LITCHAR reduce production expressao -> expressao operador expressao 
-- On LITBOOL reduce production expressao -> expressao operador expressao 
-- On LET reduce production expressao -> expressao operador expressao 
-- On INCR reduce production expressao -> expressao operador expressao 
-- On IGUAL reduce production expressao -> expressao operador expressao 
-- On IF reduce production expressao -> expressao operador expressao 
-- On ID reduce production expressao -> expressao operador expressao 
-- On FUNCTION reduce production expressao -> expressao operador expressao 
-- On FPAR reduce production expressao -> expressao operador expressao 
-- On FOR reduce production expressao -> expressao operador expressao 
-- On FCOLCH reduce production expressao -> expressao operador expressao 
-- On FCHAVE reduce production expressao -> expressao operador expressao 
-- On EOF reduce production expressao -> expressao operador expressao 
-- On ELSE reduce production expressao -> expressao operador expressao 
-- On DO reduce production expressao -> expressao operador expressao 
-- On DIV reduce production expressao -> expressao operador expressao 
-- On DIF reduce production expressao -> expressao operador expressao 
-- On DECR reduce production expressao -> expressao operador expressao 
-- On CONST reduce production expressao -> expressao operador expressao 
-- On CONSOLELOG reduce production expressao -> expressao operador expressao 
-- On BREAK reduce production expressao -> expressao operador expressao 
-- On AND reduce production expressao -> expressao operador expressao 
** Conflict on POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL DIV DIF AND

State 58:
loption(separated_nonempty_list(VIRG,expressao)) -> separated_nonempty_list(VIRG,expressao) . [ FPAR ]
-- On FPAR reduce production loption(separated_nonempty_list(VIRG,expressao)) -> separated_nonempty_list(VIRG,expressao) 

State 59:
funcao_args -> loption(separated_nonempty_list(VIRG,expressao)) . [ FPAR ]
-- On FPAR reduce production funcao_args -> loption(separated_nonempty_list(VIRG,expressao)) 

State 60:
chamada_funcao -> variavel ATRIB ID APAR funcao_args . FPAR option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On FPAR shift to state 61

State 61:
chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR . option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 64
-- On WHILE reduce production option(stm_ptv) -> 
-- On VIRG reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On POT reduce production option(stm_ptv) -> 
-- On PONTOVIRG reduce production option(stm_ptv) -> 
-- On OR reduce production option(stm_ptv) -> 
-- On MULTATRIB reduce production option(stm_ptv) -> 
-- On MULT reduce production option(stm_ptv) -> 
-- On MOD reduce production option(stm_ptv) -> 
-- On MENOSATRIB reduce production option(stm_ptv) -> 
-- On MENOS reduce production option(stm_ptv) -> 
-- On MENORIGUAL reduce production option(stm_ptv) -> 
-- On MENOR reduce production option(stm_ptv) -> 
-- On MAISATRIB reduce production option(stm_ptv) -> 
-- On MAIS reduce production option(stm_ptv) -> 
-- On MAIORIGUAL reduce production option(stm_ptv) -> 
-- On MAIOR reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IGUAL reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FPAR reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCOLCH reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DIV reduce production option(stm_ptv) -> 
-- On DIF reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 
-- On AND reduce production option(stm_ptv) -> 
** Conflict on PONTOVIRG

State 62:
stm_ptv -> PONTOVIRG . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DEFAULT DECR CONST CONSOLELOG CASE BREAK AND ]
-- On WHILE reduce production stm_ptv -> PONTOVIRG 
-- On VIRG reduce production stm_ptv -> PONTOVIRG 
-- On VAR reduce production stm_ptv -> PONTOVIRG 
-- On SWITCH reduce production stm_ptv -> PONTOVIRG 
-- On RETURN reduce production stm_ptv -> PONTOVIRG 
-- On POT reduce production stm_ptv -> PONTOVIRG 
-- On PONTOVIRG reduce production stm_ptv -> PONTOVIRG 
-- On OR reduce production stm_ptv -> PONTOVIRG 
-- On MULTATRIB reduce production stm_ptv -> PONTOVIRG 
-- On MULT reduce production stm_ptv -> PONTOVIRG 
-- On MOD reduce production stm_ptv -> PONTOVIRG 
-- On MENOSATRIB reduce production stm_ptv -> PONTOVIRG 
-- On MENOS reduce production stm_ptv -> PONTOVIRG 
-- On MENORIGUAL reduce production stm_ptv -> PONTOVIRG 
-- On MENOR reduce production stm_ptv -> PONTOVIRG 
-- On MAISATRIB reduce production stm_ptv -> PONTOVIRG 
-- On MAIS reduce production stm_ptv -> PONTOVIRG 
-- On MAIORIGUAL reduce production stm_ptv -> PONTOVIRG 
-- On MAIOR reduce production stm_ptv -> PONTOVIRG 
-- On LITSTRING reduce production stm_ptv -> PONTOVIRG 
-- On LITINT reduce production stm_ptv -> PONTOVIRG 
-- On LITFLOAT reduce production stm_ptv -> PONTOVIRG 
-- On LITCHAR reduce production stm_ptv -> PONTOVIRG 
-- On LITBOOL reduce production stm_ptv -> PONTOVIRG 
-- On LET reduce production stm_ptv -> PONTOVIRG 
-- On INCR reduce production stm_ptv -> PONTOVIRG 
-- On IGUAL reduce production stm_ptv -> PONTOVIRG 
-- On IF reduce production stm_ptv -> PONTOVIRG 
-- On ID reduce production stm_ptv -> PONTOVIRG 
-- On FUNCTION reduce production stm_ptv -> PONTOVIRG 
-- On FPAR reduce production stm_ptv -> PONTOVIRG 
-- On FOR reduce production stm_ptv -> PONTOVIRG 
-- On FCOLCH reduce production stm_ptv -> PONTOVIRG 
-- On FCHAVE reduce production stm_ptv -> PONTOVIRG 
-- On EOF reduce production stm_ptv -> PONTOVIRG 
-- On ELSE reduce production stm_ptv -> PONTOVIRG 
-- On DO reduce production stm_ptv -> PONTOVIRG 
-- On DIV reduce production stm_ptv -> PONTOVIRG 
-- On DIF reduce production stm_ptv -> PONTOVIRG 
-- On DEFAULT reduce production stm_ptv -> PONTOVIRG 
-- On DECR reduce production stm_ptv -> PONTOVIRG 
-- On CONST reduce production stm_ptv -> PONTOVIRG 
-- On CONSOLELOG reduce production stm_ptv -> PONTOVIRG 
-- On CASE reduce production stm_ptv -> PONTOVIRG 
-- On BREAK reduce production stm_ptv -> PONTOVIRG 
-- On AND reduce production stm_ptv -> PONTOVIRG 

State 63:
option(stm_ptv) -> stm_ptv . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DEFAULT DECR CONST CONSOLELOG CASE BREAK AND ]
-- On WHILE reduce production option(stm_ptv) -> stm_ptv 
-- On VIRG reduce production option(stm_ptv) -> stm_ptv 
-- On VAR reduce production option(stm_ptv) -> stm_ptv 
-- On SWITCH reduce production option(stm_ptv) -> stm_ptv 
-- On RETURN reduce production option(stm_ptv) -> stm_ptv 
-- On POT reduce production option(stm_ptv) -> stm_ptv 
-- On PONTOVIRG reduce production option(stm_ptv) -> stm_ptv 
-- On OR reduce production option(stm_ptv) -> stm_ptv 
-- On MULTATRIB reduce production option(stm_ptv) -> stm_ptv 
-- On MULT reduce production option(stm_ptv) -> stm_ptv 
-- On MOD reduce production option(stm_ptv) -> stm_ptv 
-- On MENOSATRIB reduce production option(stm_ptv) -> stm_ptv 
-- On MENOS reduce production option(stm_ptv) -> stm_ptv 
-- On MENORIGUAL reduce production option(stm_ptv) -> stm_ptv 
-- On MENOR reduce production option(stm_ptv) -> stm_ptv 
-- On MAISATRIB reduce production option(stm_ptv) -> stm_ptv 
-- On MAIS reduce production option(stm_ptv) -> stm_ptv 
-- On MAIORIGUAL reduce production option(stm_ptv) -> stm_ptv 
-- On MAIOR reduce production option(stm_ptv) -> stm_ptv 
-- On LITSTRING reduce production option(stm_ptv) -> stm_ptv 
-- On LITINT reduce production option(stm_ptv) -> stm_ptv 
-- On LITFLOAT reduce production option(stm_ptv) -> stm_ptv 
-- On LITCHAR reduce production option(stm_ptv) -> stm_ptv 
-- On LITBOOL reduce production option(stm_ptv) -> stm_ptv 
-- On LET reduce production option(stm_ptv) -> stm_ptv 
-- On INCR reduce production option(stm_ptv) -> stm_ptv 
-- On IGUAL reduce production option(stm_ptv) -> stm_ptv 
-- On IF reduce production option(stm_ptv) -> stm_ptv 
-- On ID reduce production option(stm_ptv) -> stm_ptv 
-- On FUNCTION reduce production option(stm_ptv) -> stm_ptv 
-- On FPAR reduce production option(stm_ptv) -> stm_ptv 
-- On FOR reduce production option(stm_ptv) -> stm_ptv 
-- On FCOLCH reduce production option(stm_ptv) -> stm_ptv 
-- On FCHAVE reduce production option(stm_ptv) -> stm_ptv 
-- On EOF reduce production option(stm_ptv) -> stm_ptv 
-- On ELSE reduce production option(stm_ptv) -> stm_ptv 
-- On DO reduce production option(stm_ptv) -> stm_ptv 
-- On DIV reduce production option(stm_ptv) -> stm_ptv 
-- On DIF reduce production option(stm_ptv) -> stm_ptv 
-- On DEFAULT reduce production option(stm_ptv) -> stm_ptv 
-- On DECR reduce production option(stm_ptv) -> stm_ptv 
-- On CONST reduce production option(stm_ptv) -> stm_ptv 
-- On CONSOLELOG reduce production option(stm_ptv) -> stm_ptv 
-- On CASE reduce production option(stm_ptv) -> stm_ptv 
-- On BREAK reduce production option(stm_ptv) -> stm_ptv 
-- On AND reduce production option(stm_ptv) -> stm_ptv 

State 64:
chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On VIRG reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On VAR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On SWITCH reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On RETURN reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On POT reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On PONTOVIRG reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On OR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MULTATRIB reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MULT reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MOD reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOSATRIB reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOS reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENORIGUAL reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAISATRIB reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIS reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIORIGUAL reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIOR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITSTRING reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITINT reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITFLOAT reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITCHAR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITBOOL reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LET reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On INCR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On IGUAL reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On IF reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On ID reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On FUNCTION reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On FPAR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On FOR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On FCOLCH reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On FCHAVE reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On EOF reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On ELSE reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On DO reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On DIV reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On DIF reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On DECR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On CONST reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On CONSOLELOG reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On BREAK reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On AND reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 

State 65:
expressao -> expressao . operador expressao [ VIRG POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF AND ]
separated_nonempty_list(VIRG,expressao) -> expressao . [ FPAR ]
separated_nonempty_list(VIRG,expressao) -> expressao . VIRG separated_nonempty_list(VIRG,expressao) [ FPAR ]
-- On VIRG shift to state 66
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56
-- On FPAR reduce production separated_nonempty_list(VIRG,expressao) -> expressao 

State 66:
separated_nonempty_list(VIRG,expressao) -> expressao VIRG . separated_nonempty_list(VIRG,expressao) [ FPAR ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On separated_nonempty_list(VIRG,expressao) shift to state 67
-- On literal shift to state 27
-- On expressao shift to state 65
-- On chamada_funcao shift to state 28

State 67:
separated_nonempty_list(VIRG,expressao) -> expressao VIRG separated_nonempty_list(VIRG,expressao) . [ FPAR ]
-- On FPAR reduce production separated_nonempty_list(VIRG,expressao) -> expressao VIRG separated_nonempty_list(VIRG,expressao) 

State 68:
expressao -> MENOS termo . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production expressao -> MENOS termo 
-- On VIRG reduce production expressao -> MENOS termo 
-- On VAR reduce production expressao -> MENOS termo 
-- On SWITCH reduce production expressao -> MENOS termo 
-- On RETURN reduce production expressao -> MENOS termo 
-- On POT reduce production expressao -> MENOS termo 
-- On PONTOVIRG reduce production expressao -> MENOS termo 
-- On OR reduce production expressao -> MENOS termo 
-- On MULTATRIB reduce production expressao -> MENOS termo 
-- On MULT reduce production expressao -> MENOS termo 
-- On MOD reduce production expressao -> MENOS termo 
-- On MENOSATRIB reduce production expressao -> MENOS termo 
-- On MENOS reduce production expressao -> MENOS termo 
-- On MENORIGUAL reduce production expressao -> MENOS termo 
-- On MENOR reduce production expressao -> MENOS termo 
-- On MAISATRIB reduce production expressao -> MENOS termo 
-- On MAIS reduce production expressao -> MENOS termo 
-- On MAIORIGUAL reduce production expressao -> MENOS termo 
-- On MAIOR reduce production expressao -> MENOS termo 
-- On LITSTRING reduce production expressao -> MENOS termo 
-- On LITINT reduce production expressao -> MENOS termo 
-- On LITFLOAT reduce production expressao -> MENOS termo 
-- On LITCHAR reduce production expressao -> MENOS termo 
-- On LITBOOL reduce production expressao -> MENOS termo 
-- On LET reduce production expressao -> MENOS termo 
-- On INCR reduce production expressao -> MENOS termo 
-- On IGUAL reduce production expressao -> MENOS termo 
-- On IF reduce production expressao -> MENOS termo 
-- On ID reduce production expressao -> MENOS termo 
-- On FUNCTION reduce production expressao -> MENOS termo 
-- On FPAR reduce production expressao -> MENOS termo 
-- On FOR reduce production expressao -> MENOS termo 
-- On FCOLCH reduce production expressao -> MENOS termo 
-- On FCHAVE reduce production expressao -> MENOS termo 
-- On EOF reduce production expressao -> MENOS termo 
-- On ELSE reduce production expressao -> MENOS termo 
-- On DO reduce production expressao -> MENOS termo 
-- On DIV reduce production expressao -> MENOS termo 
-- On DIF reduce production expressao -> MENOS termo 
-- On DECR reduce production expressao -> MENOS termo 
-- On CONST reduce production expressao -> MENOS termo 
-- On CONSOLELOG reduce production expressao -> MENOS termo 
-- On BREAK reduce production expressao -> MENOS termo 
-- On AND reduce production expressao -> MENOS termo 

State 69:
chamada_funcao -> ID APAR funcao_args . FPAR option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On FPAR shift to state 70

State 70:
chamada_funcao -> ID APAR funcao_args FPAR . option(stm_ptv) [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 71
-- On WHILE reduce production option(stm_ptv) -> 
-- On VIRG reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On POT reduce production option(stm_ptv) -> 
-- On PONTOVIRG reduce production option(stm_ptv) -> 
-- On OR reduce production option(stm_ptv) -> 
-- On MULTATRIB reduce production option(stm_ptv) -> 
-- On MULT reduce production option(stm_ptv) -> 
-- On MOD reduce production option(stm_ptv) -> 
-- On MENOSATRIB reduce production option(stm_ptv) -> 
-- On MENOS reduce production option(stm_ptv) -> 
-- On MENORIGUAL reduce production option(stm_ptv) -> 
-- On MENOR reduce production option(stm_ptv) -> 
-- On MAISATRIB reduce production option(stm_ptv) -> 
-- On MAIS reduce production option(stm_ptv) -> 
-- On MAIORIGUAL reduce production option(stm_ptv) -> 
-- On MAIOR reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IGUAL reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FPAR reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCOLCH reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DIV reduce production option(stm_ptv) -> 
-- On DIF reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 
-- On AND reduce production option(stm_ptv) -> 
** Conflict on PONTOVIRG

State 71:
chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On VIRG reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On VAR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On SWITCH reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On RETURN reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On POT reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On PONTOVIRG reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On OR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MULTATRIB reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MULT reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MOD reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOSATRIB reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOS reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENORIGUAL reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAISATRIB reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIS reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIORIGUAL reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIOR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITSTRING reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITINT reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITFLOAT reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITCHAR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITBOOL reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LET reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On INCR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On IGUAL reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On IF reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On ID reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On FUNCTION reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On FPAR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On FOR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On FCOLCH reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On FCHAVE reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On EOF reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On ELSE reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On DO reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On DIV reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On DIF reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On DECR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On CONST reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On CONSOLELOG reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On BREAK reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On AND reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 

State 72:
variavel -> ID ACOLCH . expressao FCOLCH [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK ATRIB AND ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 73
-- On chamada_funcao shift to state 28

State 73:
expressao -> expressao . operador expressao [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FCOLCH DIV DIF AND ]
variavel -> ID ACOLCH expressao . FCOLCH [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK ATRIB AND ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On FCOLCH shift to state 74
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 74:
variavel -> ID ACOLCH expressao FCOLCH . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK ATRIB AND ]
-- On WHILE reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On VIRG reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On VAR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On SWITCH reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On RETURN reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On POT reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On PONTOVIRG reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On OR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MULTATRIB reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MULT reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MOD reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MENOSATRIB reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MENOS reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MENORIGUAL reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MENOR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MAISATRIB reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MAIS reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MAIORIGUAL reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On MAIOR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On LITSTRING reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On LITINT reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On LITFLOAT reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On LITCHAR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On LITBOOL reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On LET reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On INCR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On IGUAL reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On IF reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On ID reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On FUNCTION reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On FPAR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On FOR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On FCOLCH reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On FCHAVE reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On EOF reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On ELSE reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On DO reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On DIV reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On DIF reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On DECR reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On CONST reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On CONSOLELOG reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On BREAK reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On ATRIB reduce production variavel -> ID ACOLCH expressao FCOLCH 
-- On AND reduce production variavel -> ID ACOLCH expressao FCOLCH 

State 75:
expressao -> NOT termo . [ WHILE VIRG VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FPAR FOR FCOLCH FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
-- On WHILE reduce production expressao -> NOT termo 
-- On VIRG reduce production expressao -> NOT termo 
-- On VAR reduce production expressao -> NOT termo 
-- On SWITCH reduce production expressao -> NOT termo 
-- On RETURN reduce production expressao -> NOT termo 
-- On POT reduce production expressao -> NOT termo 
-- On PONTOVIRG reduce production expressao -> NOT termo 
-- On OR reduce production expressao -> NOT termo 
-- On MULTATRIB reduce production expressao -> NOT termo 
-- On MULT reduce production expressao -> NOT termo 
-- On MOD reduce production expressao -> NOT termo 
-- On MENOSATRIB reduce production expressao -> NOT termo 
-- On MENOS reduce production expressao -> NOT termo 
-- On MENORIGUAL reduce production expressao -> NOT termo 
-- On MENOR reduce production expressao -> NOT termo 
-- On MAISATRIB reduce production expressao -> NOT termo 
-- On MAIS reduce production expressao -> NOT termo 
-- On MAIORIGUAL reduce production expressao -> NOT termo 
-- On MAIOR reduce production expressao -> NOT termo 
-- On LITSTRING reduce production expressao -> NOT termo 
-- On LITINT reduce production expressao -> NOT termo 
-- On LITFLOAT reduce production expressao -> NOT termo 
-- On LITCHAR reduce production expressao -> NOT termo 
-- On LITBOOL reduce production expressao -> NOT termo 
-- On LET reduce production expressao -> NOT termo 
-- On INCR reduce production expressao -> NOT termo 
-- On IGUAL reduce production expressao -> NOT termo 
-- On IF reduce production expressao -> NOT termo 
-- On ID reduce production expressao -> NOT termo 
-- On FUNCTION reduce production expressao -> NOT termo 
-- On FPAR reduce production expressao -> NOT termo 
-- On FOR reduce production expressao -> NOT termo 
-- On FCOLCH reduce production expressao -> NOT termo 
-- On FCHAVE reduce production expressao -> NOT termo 
-- On EOF reduce production expressao -> NOT termo 
-- On ELSE reduce production expressao -> NOT termo 
-- On DO reduce production expressao -> NOT termo 
-- On DIV reduce production expressao -> NOT termo 
-- On DIF reduce production expressao -> NOT termo 
-- On DECR reduce production expressao -> NOT termo 
-- On CONST reduce production expressao -> NOT termo 
-- On CONSOLELOG reduce production expressao -> NOT termo 
-- On BREAK reduce production expressao -> NOT termo 
-- On AND reduce production expressao -> NOT termo 

State 76:
expressao -> expressao . operador expressao [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF AND ]
stm_while -> WHILE APAR expressao . FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_while -> WHILE APAR expressao . FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On FPAR shift to state 77
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 77:
stm_while -> WHILE APAR expressao FPAR . ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_while -> WHILE APAR expressao FPAR . statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On ACHAVE shift to state 207
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 210
-- On literal shift to state 27
-- On chamada_funcao shift to state 164

State 78:
tipo -> VAR . [ ID ]
-- On ID reduce production tipo -> VAR 

State 79:
stm_switch -> SWITCH . APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On APAR shift to state 80

State 80:
stm_switch -> SWITCH APAR . variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ID shift to state 81
-- On variavel shift to state 82

State 81:
variavel -> ID . [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF ATRIB AND ]
variavel -> ID . ACOLCH expressao FCOLCH [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF ATRIB AND ]
-- On ACOLCH shift to state 72
-- On POT reduce production variavel -> ID 
-- On OR reduce production variavel -> ID 
-- On MULTATRIB reduce production variavel -> ID 
-- On MULT reduce production variavel -> ID 
-- On MOD reduce production variavel -> ID 
-- On MENOSATRIB reduce production variavel -> ID 
-- On MENOS reduce production variavel -> ID 
-- On MENORIGUAL reduce production variavel -> ID 
-- On MENOR reduce production variavel -> ID 
-- On MAISATRIB reduce production variavel -> ID 
-- On MAIS reduce production variavel -> ID 
-- On MAIORIGUAL reduce production variavel -> ID 
-- On MAIOR reduce production variavel -> ID 
-- On IGUAL reduce production variavel -> ID 
-- On FPAR reduce production variavel -> ID 
-- On DIV reduce production variavel -> ID 
-- On DIF reduce production variavel -> ID 
-- On ATRIB reduce production variavel -> ID 
-- On AND reduce production variavel -> ID 

State 82:
stm_switch -> SWITCH APAR variavel . FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On FPAR shift to state 83

State 83:
stm_switch -> SWITCH APAR variavel FPAR . ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ACHAVE shift to state 84

State 84:
stm_switch -> SWITCH APAR variavel FPAR ACHAVE . nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On CASE shift to state 85
-- On nonempty_list(case) shift to state 200
-- On case shift to state 205

State 85:
case -> CASE . LITCHAR DOISPTO list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
case -> CASE . LITINT DOISPTO list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
case -> CASE . LITSTRING DOISPTO list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On LITSTRING shift to state 86
-- On LITINT shift to state 190
-- On LITCHAR shift to state 195

State 86:
case -> CASE LITSTRING . DOISPTO list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On DOISPTO shift to state 87

State 87:
case -> CASE LITSTRING DOISPTO . list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 187
-- On chamada_funcao shift to state 164
-- On BREAK reduce production list(statement) -> 

State 88:
stm_return -> RETURN . expressao option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 89
-- On chamada_funcao shift to state 28

State 89:
expressao -> expressao . operador expressao [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
stm_return -> RETURN expressao . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On PONTOVIRG shift to state 62
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 90
-- On operador shift to state 56
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 90:
stm_return -> RETURN expressao option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On VAR reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On SWITCH reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On RETURN reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On LITSTRING reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On LITINT reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On LITFLOAT reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On LITCHAR reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On LITBOOL reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On LET reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On INCR reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On IF reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On ID reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On FUNCTION reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On FOR reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On FCHAVE reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On EOF reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On ELSE reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On DO reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On DECR reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On CONST reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On CONSOLELOG reduce production stm_return -> RETURN expressao option(stm_ptv) 
-- On BREAK reduce production stm_return -> RETURN expressao option(stm_ptv) 

State 91:
tipo -> LET . [ ID ]
-- On ID reduce production tipo -> LET 

State 92:
stm_incr_decr -> INCR . termo option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On ID shift to state 18
-- On variavel shift to state 21
-- On termo shift to state 93
-- On literal shift to state 27
-- On chamada_funcao shift to state 28

State 93:
stm_incr_decr -> INCR termo . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 94
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 94:
stm_incr_decr -> INCR termo option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On VAR reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On SWITCH reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On RETURN reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On LITSTRING reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On LITINT reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On LITFLOAT reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On LITCHAR reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On LITBOOL reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On LET reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On INCR reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On IF reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On ID reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On FUNCTION reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On FOR reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On FCHAVE reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On EOF reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On ELSE reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On DO reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On DECR reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On CONST reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On CONSOLELOG reduce production stm_incr_decr -> INCR termo option(stm_ptv) 
-- On BREAK reduce production stm_incr_decr -> INCR termo option(stm_ptv) 

State 95:
stm_if -> IF . APAR expressao FPAR statement option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_if -> IF . APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On APAR shift to state 96

State 96:
stm_if -> IF APAR . expressao FPAR statement option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_if -> IF APAR . expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 97
-- On chamada_funcao shift to state 28

State 97:
expressao -> expressao . operador expressao [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF AND ]
stm_if -> IF APAR expressao . FPAR statement option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_if -> IF APAR expressao . FPAR ACHAVE list(statement) FCHAVE option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On FPAR shift to state 98
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 98:
stm_if -> IF APAR expressao FPAR . statement option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_if -> IF APAR expressao FPAR . ACHAVE list(statement) FCHAVE option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On ACHAVE shift to state 175
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 185
-- On literal shift to state 27
-- On chamada_funcao shift to state 164

State 99:
stm_for -> FOR . APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR . APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On APAR shift to state 100

State 100:
stm_for -> FOR APAR . variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR . variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ID shift to state 81
-- On variavel shift to state 101

State 101:
stm_for -> FOR APAR variavel . ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel . ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ATRIB shift to state 102

State 102:
stm_for -> FOR APAR variavel ATRIB . expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB . expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 103
-- On chamada_funcao shift to state 28

State 103:
expressao -> expressao . operador expressao [ POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL DIV DIF AND ]
stm_for -> FOR APAR variavel ATRIB expressao . PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB expressao . PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On PONTOVIRG shift to state 104
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 104:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG . variavel operador expressao PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG . variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ID shift to state 81
-- On variavel shift to state 105

State 105:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel . operador expressao PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel . operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 106

State 106:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador . expressao PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador . expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 107
-- On chamada_funcao shift to state 28

State 107:
expressao -> expressao . operador expressao [ POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL DIV DIF AND ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao . PONTOVIRG expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao . PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On PONTOVIRG shift to state 108
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 108:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG . expressao FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG . expressao FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 109
-- On chamada_funcao shift to state 28

State 109:
expressao -> expressao . operador expressao [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF AND ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao . FPAR statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao . FPAR ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On FPAR shift to state 110
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 110:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR . statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR . ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On ACHAVE shift to state 171
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 174
-- On literal shift to state 27
-- On chamada_funcao shift to state 164

State 111:
stm_dowhile -> DO . ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ACHAVE shift to state 112

State 112:
stm_dowhile -> DO ACHAVE . list(statement) FCHAVE WHILE APAR expressao FPAR [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 165
-- On chamada_funcao shift to state 164
-- On FCHAVE reduce production list(statement) -> 

State 113:
stm_incr_decr -> DECR . termo option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On ID shift to state 18
-- On variavel shift to state 21
-- On termo shift to state 114
-- On literal shift to state 27
-- On chamada_funcao shift to state 28

State 114:
stm_incr_decr -> DECR termo . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 115
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 115:
stm_incr_decr -> DECR termo option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On VAR reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On SWITCH reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On RETURN reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On LITSTRING reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On LITINT reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On LITFLOAT reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On LITCHAR reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On LITBOOL reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On LET reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On INCR reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On IF reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On ID reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On FUNCTION reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On FOR reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On FCHAVE reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On EOF reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On ELSE reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On DO reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On DECR reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On CONST reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On CONSOLELOG reduce production stm_incr_decr -> DECR termo option(stm_ptv) 
-- On BREAK reduce production stm_incr_decr -> DECR termo option(stm_ptv) 

State 116:
tipo -> CONST . [ ID ]
-- On ID reduce production tipo -> CONST 

State 117:
stm_print -> CONSOLELOG . APAR expressao FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On APAR shift to state 118

State 118:
stm_print -> CONSOLELOG APAR . expressao FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 119
-- On chamada_funcao shift to state 28

State 119:
expressao -> expressao . operador expressao [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF AND ]
stm_print -> CONSOLELOG APAR expressao . FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On FPAR shift to state 120
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 120:
stm_print -> CONSOLELOG APAR expressao FPAR . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 121
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 121:
stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On VAR reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On SWITCH reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On RETURN reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On LITSTRING reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On LITINT reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On LITFLOAT reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On LITCHAR reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On LITBOOL reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On LET reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On INCR reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On IF reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On ID reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On FUNCTION reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On FOR reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On FCHAVE reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On EOF reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On ELSE reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On DO reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On DECR reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On CONST reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On CONSOLELOG reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 
-- On BREAK reduce production stm_print -> CONSOLELOG APAR expressao FPAR option(stm_ptv) 

State 122:
chamada_funcao -> variavel . ATRIB ID APAR funcao_args FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_attr -> variavel . ATRIB expressao option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_read -> variavel . ATRIB PROMPT APAR expressao FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
termo -> variavel . [ INCR DECR ]
-- On ATRIB shift to state 123
-- On INCR reduce production termo -> variavel 
-- On DECR reduce production termo -> variavel 

State 123:
chamada_funcao -> variavel ATRIB . ID APAR funcao_args FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_attr -> variavel ATRIB . expressao option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_read -> variavel ATRIB . PROMPT APAR expressao FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PROMPT shift to state 124
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 129
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 134
-- On chamada_funcao shift to state 28

State 124:
stm_read -> variavel ATRIB PROMPT . APAR expressao FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On APAR shift to state 125

State 125:
stm_read -> variavel ATRIB PROMPT APAR . expressao FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 126
-- On chamada_funcao shift to state 28

State 126:
expressao -> expressao . operador expressao [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF AND ]
stm_read -> variavel ATRIB PROMPT APAR expressao . FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On FPAR shift to state 127
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 127:
stm_read -> variavel ATRIB PROMPT APAR expressao FPAR . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 128
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 128:
stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On VAR reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On SWITCH reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On RETURN reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On LITSTRING reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On LITINT reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On LITFLOAT reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On LITCHAR reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On LITBOOL reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On LET reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On INCR reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On IF reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On ID reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On FUNCTION reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On FOR reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On FCHAVE reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On EOF reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On ELSE reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On DO reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On DECR reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On CONST reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On CONSOLELOG reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 
-- On BREAK reduce production stm_read -> variavel ATRIB PROMPT APAR expressao FPAR option(stm_ptv) 

State 129:
chamada_funcao -> ID . APAR funcao_args FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
chamada_funcao -> variavel ATRIB ID . APAR funcao_args FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
variavel -> ID . [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK ATRIB AND ]
variavel -> ID . ACOLCH expressao FCOLCH [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK ATRIB AND ]
-- On APAR shift to state 130
-- On ACOLCH shift to state 72
-- On WHILE reduce production variavel -> ID 
-- On VAR reduce production variavel -> ID 
-- On SWITCH reduce production variavel -> ID 
-- On RETURN reduce production variavel -> ID 
-- On POT reduce production variavel -> ID 
-- On PONTOVIRG reduce production variavel -> ID 
-- On OR reduce production variavel -> ID 
-- On MULTATRIB reduce production variavel -> ID 
-- On MULT reduce production variavel -> ID 
-- On MOD reduce production variavel -> ID 
-- On MENOSATRIB reduce production variavel -> ID 
-- On MENOS reduce production variavel -> ID 
-- On MENORIGUAL reduce production variavel -> ID 
-- On MENOR reduce production variavel -> ID 
-- On MAISATRIB reduce production variavel -> ID 
-- On MAIS reduce production variavel -> ID 
-- On MAIORIGUAL reduce production variavel -> ID 
-- On MAIOR reduce production variavel -> ID 
-- On LITSTRING reduce production variavel -> ID 
-- On LITINT reduce production variavel -> ID 
-- On LITFLOAT reduce production variavel -> ID 
-- On LITCHAR reduce production variavel -> ID 
-- On LITBOOL reduce production variavel -> ID 
-- On LET reduce production variavel -> ID 
-- On INCR reduce production variavel -> ID 
-- On IGUAL reduce production variavel -> ID 
-- On IF reduce production variavel -> ID 
-- On ID reduce production variavel -> ID 
-- On FUNCTION reduce production variavel -> ID 
-- On FOR reduce production variavel -> ID 
-- On FCHAVE reduce production variavel -> ID 
-- On EOF reduce production variavel -> ID 
-- On ELSE reduce production variavel -> ID 
-- On DO reduce production variavel -> ID 
-- On DIV reduce production variavel -> ID 
-- On DIF reduce production variavel -> ID 
-- On DECR reduce production variavel -> ID 
-- On CONST reduce production variavel -> ID 
-- On CONSOLELOG reduce production variavel -> ID 
-- On BREAK reduce production variavel -> ID 
-- On ATRIB reduce production variavel -> ID 
-- On AND reduce production variavel -> ID 

State 130:
chamada_funcao -> ID APAR . funcao_args FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
chamada_funcao -> variavel ATRIB ID APAR . funcao_args FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On separated_nonempty_list(VIRG,expressao) shift to state 58
-- On loption(separated_nonempty_list(VIRG,expressao)) shift to state 59
-- On literal shift to state 27
-- On funcao_args shift to state 131
-- On expressao shift to state 65
-- On chamada_funcao shift to state 28
-- On FPAR reduce production loption(separated_nonempty_list(VIRG,expressao)) -> 

State 131:
chamada_funcao -> ID APAR funcao_args . FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
chamada_funcao -> variavel ATRIB ID APAR funcao_args . FPAR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On FPAR shift to state 132

State 132:
chamada_funcao -> ID APAR funcao_args FPAR . option(stm_ptv) [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 133
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On POT reduce production option(stm_ptv) -> 
-- On PONTOVIRG reduce production option(stm_ptv) -> 
-- On OR reduce production option(stm_ptv) -> 
-- On MULTATRIB reduce production option(stm_ptv) -> 
-- On MULT reduce production option(stm_ptv) -> 
-- On MOD reduce production option(stm_ptv) -> 
-- On MENOSATRIB reduce production option(stm_ptv) -> 
-- On MENOS reduce production option(stm_ptv) -> 
-- On MENORIGUAL reduce production option(stm_ptv) -> 
-- On MENOR reduce production option(stm_ptv) -> 
-- On MAISATRIB reduce production option(stm_ptv) -> 
-- On MAIS reduce production option(stm_ptv) -> 
-- On MAIORIGUAL reduce production option(stm_ptv) -> 
-- On MAIOR reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IGUAL reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DIV reduce production option(stm_ptv) -> 
-- On DIF reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 
-- On AND reduce production option(stm_ptv) -> 
** Conflict on PONTOVIRG

State 133:
chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) . [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On WHILE reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On VAR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On VAR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On SWITCH reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On SWITCH reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On RETURN reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On RETURN reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On POT reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On PONTOVIRG reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On OR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MULTATRIB reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MULT reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MOD reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOSATRIB reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOS reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENORIGUAL reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MENOR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAISATRIB reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIS reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIORIGUAL reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On MAIOR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITSTRING reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITSTRING reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITINT reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITINT reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITFLOAT reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITFLOAT reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITCHAR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITCHAR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITBOOL reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LITBOOL reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On LET reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On LET reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On INCR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On INCR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On IGUAL reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On IF reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On IF reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On ID reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On ID reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On FUNCTION reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On FUNCTION reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On FOR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On FOR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On FCHAVE reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On FCHAVE reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On EOF reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On EOF reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On ELSE reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On ELSE reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On DO reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On DO reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On DIV reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On DIF reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On DECR reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On DECR reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On CONST reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On CONST reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On CONSOLELOG reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On CONSOLELOG reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On BREAK reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
-- On BREAK reduce production chamada_funcao -> variavel ATRIB ID APAR funcao_args FPAR option(stm_ptv) 
-- On AND reduce production chamada_funcao -> ID APAR funcao_args FPAR option(stm_ptv) 
** Conflict on WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK

State 134:
expressao -> expressao . operador expressao [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
stm_attr -> variavel ATRIB expressao . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On PONTOVIRG shift to state 62
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 135
-- On operador shift to state 56
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 135:
stm_attr -> variavel ATRIB expressao option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On VAR reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On SWITCH reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On RETURN reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On LITSTRING reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On LITINT reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On LITFLOAT reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On LITCHAR reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On LITBOOL reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On LET reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On INCR reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On IF reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On ID reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On FUNCTION reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On FOR reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On FCHAVE reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On EOF reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On ELSE reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On DO reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On DECR reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On CONST reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On CONSOLELOG reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 
-- On BREAK reduce production stm_attr -> variavel ATRIB expressao option(stm_ptv) 

State 136:
stm_declara_var -> tipo . separated_nonempty_list(VIRG,ID) option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_declara_var_inicializa -> tipo . separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ID shift to state 137
-- On separated_nonempty_list(VIRG,ID) shift to state 140

State 137:
separated_nonempty_list(VIRG,ID) -> ID . [ WHILE VAR SWITCH RETURN PONTOVIRG LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ATRIB ]
separated_nonempty_list(VIRG,ID) -> ID . VIRG separated_nonempty_list(VIRG,ID) [ WHILE VAR SWITCH RETURN PONTOVIRG LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ATRIB ]
-- On VIRG shift to state 138
-- On WHILE reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On VAR reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On SWITCH reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On RETURN reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On PONTOVIRG reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On LITSTRING reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On LITINT reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On LITFLOAT reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On LITCHAR reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On LITBOOL reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On LET reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On INCR reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On IF reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On ID reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On FUNCTION reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On FOR reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On FCHAVE reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On EOF reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On ELSE reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On DO reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On DECR reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On CONST reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On CONSOLELOG reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On BREAK reduce production separated_nonempty_list(VIRG,ID) -> ID 
-- On ATRIB reduce production separated_nonempty_list(VIRG,ID) -> ID 

State 138:
separated_nonempty_list(VIRG,ID) -> ID VIRG . separated_nonempty_list(VIRG,ID) [ WHILE VAR SWITCH RETURN PONTOVIRG LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ATRIB ]
-- On ID shift to state 137
-- On separated_nonempty_list(VIRG,ID) shift to state 139

State 139:
separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) . [ WHILE VAR SWITCH RETURN PONTOVIRG LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ATRIB ]
-- On WHILE reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On VAR reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On SWITCH reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On RETURN reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On PONTOVIRG reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On LITSTRING reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On LITINT reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On LITFLOAT reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On LITCHAR reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On LITBOOL reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On LET reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On INCR reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On IF reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On ID reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On FUNCTION reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On FOR reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On FCHAVE reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On EOF reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On ELSE reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On DO reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On DECR reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On CONST reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On CONSOLELOG reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On BREAK reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 
-- On ATRIB reduce production separated_nonempty_list(VIRG,ID) -> ID VIRG separated_nonempty_list(VIRG,ID) 

State 140:
stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) . ATRIB expressao option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PONTOVIRG shift to state 62
-- On ATRIB shift to state 141
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 144
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 141:
stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB . expressao option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 142
-- On chamada_funcao shift to state 28

State 142:
expressao -> expressao . operador expressao [ WHILE VAR SWITCH RETURN POT PONTOVIRG OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IGUAL IF ID FUNCTION FOR FCHAVE EOF ELSE DO DIV DIF DECR CONST CONSOLELOG BREAK AND ]
stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On PONTOVIRG shift to state 62
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 143
-- On operador shift to state 56
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 143:
stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On VAR reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On SWITCH reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On RETURN reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On LITSTRING reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On LITINT reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On LITFLOAT reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On LITCHAR reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On LITBOOL reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On LET reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On INCR reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On IF reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On ID reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On FUNCTION reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On FOR reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On FCHAVE reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On EOF reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On ELSE reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On DO reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On DECR reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On CONST reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On CONSOLELOG reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 
-- On BREAK reduce production stm_declara_var_inicializa -> tipo separated_nonempty_list(VIRG,ID) ATRIB expressao option(stm_ptv) 

State 144:
stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On VAR reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On SWITCH reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On RETURN reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On LITSTRING reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On LITINT reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On LITFLOAT reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On LITCHAR reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On LITBOOL reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On LET reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On INCR reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On IF reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On ID reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On FUNCTION reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On FOR reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On FCHAVE reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On EOF reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On ELSE reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On DO reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On DECR reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On CONST reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On CONSOLELOG reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 
-- On BREAK reduce production stm_declara_var -> tipo separated_nonempty_list(VIRG,ID) option(stm_ptv) 

State 145:
stm_incr_decr -> termo . DECR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_incr_decr -> termo . INCR option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On INCR shift to state 146
-- On DECR shift to state 148

State 146:
stm_incr_decr -> termo INCR . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 147
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 147:
stm_incr_decr -> termo INCR option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On VAR reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On SWITCH reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On RETURN reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On LITSTRING reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On LITINT reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On LITFLOAT reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On LITCHAR reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On LITBOOL reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On LET reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On INCR reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On IF reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On ID reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On FUNCTION reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On FOR reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On FCHAVE reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On EOF reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On ELSE reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On DO reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On DECR reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On CONST reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On CONSOLELOG reduce production stm_incr_decr -> termo INCR option(stm_ptv) 
-- On BREAK reduce production stm_incr_decr -> termo INCR option(stm_ptv) 

State 148:
stm_incr_decr -> termo DECR . option(stm_ptv) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 149
-- On WHILE reduce production option(stm_ptv) -> 
-- On VAR reduce production option(stm_ptv) -> 
-- On SWITCH reduce production option(stm_ptv) -> 
-- On RETURN reduce production option(stm_ptv) -> 
-- On LITSTRING reduce production option(stm_ptv) -> 
-- On LITINT reduce production option(stm_ptv) -> 
-- On LITFLOAT reduce production option(stm_ptv) -> 
-- On LITCHAR reduce production option(stm_ptv) -> 
-- On LITBOOL reduce production option(stm_ptv) -> 
-- On LET reduce production option(stm_ptv) -> 
-- On INCR reduce production option(stm_ptv) -> 
-- On IF reduce production option(stm_ptv) -> 
-- On ID reduce production option(stm_ptv) -> 
-- On FUNCTION reduce production option(stm_ptv) -> 
-- On FOR reduce production option(stm_ptv) -> 
-- On FCHAVE reduce production option(stm_ptv) -> 
-- On EOF reduce production option(stm_ptv) -> 
-- On ELSE reduce production option(stm_ptv) -> 
-- On DO reduce production option(stm_ptv) -> 
-- On DECR reduce production option(stm_ptv) -> 
-- On CONST reduce production option(stm_ptv) -> 
-- On CONSOLELOG reduce production option(stm_ptv) -> 
-- On BREAK reduce production option(stm_ptv) -> 

State 149:
stm_incr_decr -> termo DECR option(stm_ptv) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On VAR reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On SWITCH reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On RETURN reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On LITSTRING reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On LITINT reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On LITFLOAT reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On LITCHAR reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On LITBOOL reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On LET reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On INCR reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On IF reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On ID reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On FUNCTION reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On FOR reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On FCHAVE reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On EOF reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On ELSE reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On DO reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On DECR reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On CONST reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On CONSOLELOG reduce production stm_incr_decr -> termo DECR option(stm_ptv) 
-- On BREAK reduce production stm_incr_decr -> termo DECR option(stm_ptv) 

State 150:
statement -> stm_while . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_while 
-- On VAR reduce production statement -> stm_while 
-- On SWITCH reduce production statement -> stm_while 
-- On RETURN reduce production statement -> stm_while 
-- On LITSTRING reduce production statement -> stm_while 
-- On LITINT reduce production statement -> stm_while 
-- On LITFLOAT reduce production statement -> stm_while 
-- On LITCHAR reduce production statement -> stm_while 
-- On LITBOOL reduce production statement -> stm_while 
-- On LET reduce production statement -> stm_while 
-- On INCR reduce production statement -> stm_while 
-- On IF reduce production statement -> stm_while 
-- On ID reduce production statement -> stm_while 
-- On FUNCTION reduce production statement -> stm_while 
-- On FOR reduce production statement -> stm_while 
-- On FCHAVE reduce production statement -> stm_while 
-- On EOF reduce production statement -> stm_while 
-- On ELSE reduce production statement -> stm_while 
-- On DO reduce production statement -> stm_while 
-- On DECR reduce production statement -> stm_while 
-- On CONST reduce production statement -> stm_while 
-- On CONSOLELOG reduce production statement -> stm_while 
-- On BREAK reduce production statement -> stm_while 

State 151:
statement -> stm_switch . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_switch 
-- On VAR reduce production statement -> stm_switch 
-- On SWITCH reduce production statement -> stm_switch 
-- On RETURN reduce production statement -> stm_switch 
-- On LITSTRING reduce production statement -> stm_switch 
-- On LITINT reduce production statement -> stm_switch 
-- On LITFLOAT reduce production statement -> stm_switch 
-- On LITCHAR reduce production statement -> stm_switch 
-- On LITBOOL reduce production statement -> stm_switch 
-- On LET reduce production statement -> stm_switch 
-- On INCR reduce production statement -> stm_switch 
-- On IF reduce production statement -> stm_switch 
-- On ID reduce production statement -> stm_switch 
-- On FUNCTION reduce production statement -> stm_switch 
-- On FOR reduce production statement -> stm_switch 
-- On FCHAVE reduce production statement -> stm_switch 
-- On EOF reduce production statement -> stm_switch 
-- On ELSE reduce production statement -> stm_switch 
-- On DO reduce production statement -> stm_switch 
-- On DECR reduce production statement -> stm_switch 
-- On CONST reduce production statement -> stm_switch 
-- On CONSOLELOG reduce production statement -> stm_switch 
-- On BREAK reduce production statement -> stm_switch 

State 152:
statement -> stm_return . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_return 
-- On VAR reduce production statement -> stm_return 
-- On SWITCH reduce production statement -> stm_return 
-- On RETURN reduce production statement -> stm_return 
-- On LITSTRING reduce production statement -> stm_return 
-- On LITINT reduce production statement -> stm_return 
-- On LITFLOAT reduce production statement -> stm_return 
-- On LITCHAR reduce production statement -> stm_return 
-- On LITBOOL reduce production statement -> stm_return 
-- On LET reduce production statement -> stm_return 
-- On INCR reduce production statement -> stm_return 
-- On IF reduce production statement -> stm_return 
-- On ID reduce production statement -> stm_return 
-- On FUNCTION reduce production statement -> stm_return 
-- On FOR reduce production statement -> stm_return 
-- On FCHAVE reduce production statement -> stm_return 
-- On EOF reduce production statement -> stm_return 
-- On ELSE reduce production statement -> stm_return 
-- On DO reduce production statement -> stm_return 
-- On DECR reduce production statement -> stm_return 
-- On CONST reduce production statement -> stm_return 
-- On CONSOLELOG reduce production statement -> stm_return 
-- On BREAK reduce production statement -> stm_return 

State 153:
statement -> stm_read . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_read 
-- On VAR reduce production statement -> stm_read 
-- On SWITCH reduce production statement -> stm_read 
-- On RETURN reduce production statement -> stm_read 
-- On LITSTRING reduce production statement -> stm_read 
-- On LITINT reduce production statement -> stm_read 
-- On LITFLOAT reduce production statement -> stm_read 
-- On LITCHAR reduce production statement -> stm_read 
-- On LITBOOL reduce production statement -> stm_read 
-- On LET reduce production statement -> stm_read 
-- On INCR reduce production statement -> stm_read 
-- On IF reduce production statement -> stm_read 
-- On ID reduce production statement -> stm_read 
-- On FUNCTION reduce production statement -> stm_read 
-- On FOR reduce production statement -> stm_read 
-- On FCHAVE reduce production statement -> stm_read 
-- On EOF reduce production statement -> stm_read 
-- On ELSE reduce production statement -> stm_read 
-- On DO reduce production statement -> stm_read 
-- On DECR reduce production statement -> stm_read 
-- On CONST reduce production statement -> stm_read 
-- On CONSOLELOG reduce production statement -> stm_read 
-- On BREAK reduce production statement -> stm_read 

State 154:
statement -> stm_print . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_print 
-- On VAR reduce production statement -> stm_print 
-- On SWITCH reduce production statement -> stm_print 
-- On RETURN reduce production statement -> stm_print 
-- On LITSTRING reduce production statement -> stm_print 
-- On LITINT reduce production statement -> stm_print 
-- On LITFLOAT reduce production statement -> stm_print 
-- On LITCHAR reduce production statement -> stm_print 
-- On LITBOOL reduce production statement -> stm_print 
-- On LET reduce production statement -> stm_print 
-- On INCR reduce production statement -> stm_print 
-- On IF reduce production statement -> stm_print 
-- On ID reduce production statement -> stm_print 
-- On FUNCTION reduce production statement -> stm_print 
-- On FOR reduce production statement -> stm_print 
-- On FCHAVE reduce production statement -> stm_print 
-- On EOF reduce production statement -> stm_print 
-- On ELSE reduce production statement -> stm_print 
-- On DO reduce production statement -> stm_print 
-- On DECR reduce production statement -> stm_print 
-- On CONST reduce production statement -> stm_print 
-- On CONSOLELOG reduce production statement -> stm_print 
-- On BREAK reduce production statement -> stm_print 

State 155:
statement -> stm_incr_decr . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_incr_decr 
-- On VAR reduce production statement -> stm_incr_decr 
-- On SWITCH reduce production statement -> stm_incr_decr 
-- On RETURN reduce production statement -> stm_incr_decr 
-- On LITSTRING reduce production statement -> stm_incr_decr 
-- On LITINT reduce production statement -> stm_incr_decr 
-- On LITFLOAT reduce production statement -> stm_incr_decr 
-- On LITCHAR reduce production statement -> stm_incr_decr 
-- On LITBOOL reduce production statement -> stm_incr_decr 
-- On LET reduce production statement -> stm_incr_decr 
-- On INCR reduce production statement -> stm_incr_decr 
-- On IF reduce production statement -> stm_incr_decr 
-- On ID reduce production statement -> stm_incr_decr 
-- On FUNCTION reduce production statement -> stm_incr_decr 
-- On FOR reduce production statement -> stm_incr_decr 
-- On FCHAVE reduce production statement -> stm_incr_decr 
-- On EOF reduce production statement -> stm_incr_decr 
-- On ELSE reduce production statement -> stm_incr_decr 
-- On DO reduce production statement -> stm_incr_decr 
-- On DECR reduce production statement -> stm_incr_decr 
-- On CONST reduce production statement -> stm_incr_decr 
-- On CONSOLELOG reduce production statement -> stm_incr_decr 
-- On BREAK reduce production statement -> stm_incr_decr 

State 156:
statement -> stm_if . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_if 
-- On VAR reduce production statement -> stm_if 
-- On SWITCH reduce production statement -> stm_if 
-- On RETURN reduce production statement -> stm_if 
-- On LITSTRING reduce production statement -> stm_if 
-- On LITINT reduce production statement -> stm_if 
-- On LITFLOAT reduce production statement -> stm_if 
-- On LITCHAR reduce production statement -> stm_if 
-- On LITBOOL reduce production statement -> stm_if 
-- On LET reduce production statement -> stm_if 
-- On INCR reduce production statement -> stm_if 
-- On IF reduce production statement -> stm_if 
-- On ID reduce production statement -> stm_if 
-- On FUNCTION reduce production statement -> stm_if 
-- On FOR reduce production statement -> stm_if 
-- On FCHAVE reduce production statement -> stm_if 
-- On EOF reduce production statement -> stm_if 
-- On ELSE reduce production statement -> stm_if 
-- On DO reduce production statement -> stm_if 
-- On DECR reduce production statement -> stm_if 
-- On CONST reduce production statement -> stm_if 
-- On CONSOLELOG reduce production statement -> stm_if 
-- On BREAK reduce production statement -> stm_if 

State 157:
statement -> stm_for . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_for 
-- On VAR reduce production statement -> stm_for 
-- On SWITCH reduce production statement -> stm_for 
-- On RETURN reduce production statement -> stm_for 
-- On LITSTRING reduce production statement -> stm_for 
-- On LITINT reduce production statement -> stm_for 
-- On LITFLOAT reduce production statement -> stm_for 
-- On LITCHAR reduce production statement -> stm_for 
-- On LITBOOL reduce production statement -> stm_for 
-- On LET reduce production statement -> stm_for 
-- On INCR reduce production statement -> stm_for 
-- On IF reduce production statement -> stm_for 
-- On ID reduce production statement -> stm_for 
-- On FUNCTION reduce production statement -> stm_for 
-- On FOR reduce production statement -> stm_for 
-- On FCHAVE reduce production statement -> stm_for 
-- On EOF reduce production statement -> stm_for 
-- On ELSE reduce production statement -> stm_for 
-- On DO reduce production statement -> stm_for 
-- On DECR reduce production statement -> stm_for 
-- On CONST reduce production statement -> stm_for 
-- On CONSOLELOG reduce production statement -> stm_for 
-- On BREAK reduce production statement -> stm_for 

State 158:
statement -> stm_dowhile . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_dowhile 
-- On VAR reduce production statement -> stm_dowhile 
-- On SWITCH reduce production statement -> stm_dowhile 
-- On RETURN reduce production statement -> stm_dowhile 
-- On LITSTRING reduce production statement -> stm_dowhile 
-- On LITINT reduce production statement -> stm_dowhile 
-- On LITFLOAT reduce production statement -> stm_dowhile 
-- On LITCHAR reduce production statement -> stm_dowhile 
-- On LITBOOL reduce production statement -> stm_dowhile 
-- On LET reduce production statement -> stm_dowhile 
-- On INCR reduce production statement -> stm_dowhile 
-- On IF reduce production statement -> stm_dowhile 
-- On ID reduce production statement -> stm_dowhile 
-- On FUNCTION reduce production statement -> stm_dowhile 
-- On FOR reduce production statement -> stm_dowhile 
-- On FCHAVE reduce production statement -> stm_dowhile 
-- On EOF reduce production statement -> stm_dowhile 
-- On ELSE reduce production statement -> stm_dowhile 
-- On DO reduce production statement -> stm_dowhile 
-- On DECR reduce production statement -> stm_dowhile 
-- On CONST reduce production statement -> stm_dowhile 
-- On CONSOLELOG reduce production statement -> stm_dowhile 
-- On BREAK reduce production statement -> stm_dowhile 

State 159:
statement -> stm_declara_var_inicializa . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_declara_var_inicializa 
-- On VAR reduce production statement -> stm_declara_var_inicializa 
-- On SWITCH reduce production statement -> stm_declara_var_inicializa 
-- On RETURN reduce production statement -> stm_declara_var_inicializa 
-- On LITSTRING reduce production statement -> stm_declara_var_inicializa 
-- On LITINT reduce production statement -> stm_declara_var_inicializa 
-- On LITFLOAT reduce production statement -> stm_declara_var_inicializa 
-- On LITCHAR reduce production statement -> stm_declara_var_inicializa 
-- On LITBOOL reduce production statement -> stm_declara_var_inicializa 
-- On LET reduce production statement -> stm_declara_var_inicializa 
-- On INCR reduce production statement -> stm_declara_var_inicializa 
-- On IF reduce production statement -> stm_declara_var_inicializa 
-- On ID reduce production statement -> stm_declara_var_inicializa 
-- On FUNCTION reduce production statement -> stm_declara_var_inicializa 
-- On FOR reduce production statement -> stm_declara_var_inicializa 
-- On FCHAVE reduce production statement -> stm_declara_var_inicializa 
-- On EOF reduce production statement -> stm_declara_var_inicializa 
-- On ELSE reduce production statement -> stm_declara_var_inicializa 
-- On DO reduce production statement -> stm_declara_var_inicializa 
-- On DECR reduce production statement -> stm_declara_var_inicializa 
-- On CONST reduce production statement -> stm_declara_var_inicializa 
-- On CONSOLELOG reduce production statement -> stm_declara_var_inicializa 
-- On BREAK reduce production statement -> stm_declara_var_inicializa 

State 160:
statement -> stm_declara_var . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_declara_var 
-- On VAR reduce production statement -> stm_declara_var 
-- On SWITCH reduce production statement -> stm_declara_var 
-- On RETURN reduce production statement -> stm_declara_var 
-- On LITSTRING reduce production statement -> stm_declara_var 
-- On LITINT reduce production statement -> stm_declara_var 
-- On LITFLOAT reduce production statement -> stm_declara_var 
-- On LITCHAR reduce production statement -> stm_declara_var 
-- On LITBOOL reduce production statement -> stm_declara_var 
-- On LET reduce production statement -> stm_declara_var 
-- On INCR reduce production statement -> stm_declara_var 
-- On IF reduce production statement -> stm_declara_var 
-- On ID reduce production statement -> stm_declara_var 
-- On FUNCTION reduce production statement -> stm_declara_var 
-- On FOR reduce production statement -> stm_declara_var 
-- On FCHAVE reduce production statement -> stm_declara_var 
-- On EOF reduce production statement -> stm_declara_var 
-- On ELSE reduce production statement -> stm_declara_var 
-- On DO reduce production statement -> stm_declara_var 
-- On DECR reduce production statement -> stm_declara_var 
-- On CONST reduce production statement -> stm_declara_var 
-- On CONSOLELOG reduce production statement -> stm_declara_var 
-- On BREAK reduce production statement -> stm_declara_var 

State 161:
statement -> stm_attr . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production statement -> stm_attr 
-- On VAR reduce production statement -> stm_attr 
-- On SWITCH reduce production statement -> stm_attr 
-- On RETURN reduce production statement -> stm_attr 
-- On LITSTRING reduce production statement -> stm_attr 
-- On LITINT reduce production statement -> stm_attr 
-- On LITFLOAT reduce production statement -> stm_attr 
-- On LITCHAR reduce production statement -> stm_attr 
-- On LITBOOL reduce production statement -> stm_attr 
-- On LET reduce production statement -> stm_attr 
-- On INCR reduce production statement -> stm_attr 
-- On IF reduce production statement -> stm_attr 
-- On ID reduce production statement -> stm_attr 
-- On FUNCTION reduce production statement -> stm_attr 
-- On FOR reduce production statement -> stm_attr 
-- On FCHAVE reduce production statement -> stm_attr 
-- On EOF reduce production statement -> stm_attr 
-- On ELSE reduce production statement -> stm_attr 
-- On DO reduce production statement -> stm_attr 
-- On DECR reduce production statement -> stm_attr 
-- On CONST reduce production statement -> stm_attr 
-- On CONSOLELOG reduce production statement -> stm_attr 
-- On BREAK reduce production statement -> stm_attr 

State 162:
list(statement) -> statement . list(statement) [ FUNCTION FCHAVE EOF BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 163
-- On chamada_funcao shift to state 164
-- On FUNCTION reduce production list(statement) -> 
-- On FCHAVE reduce production list(statement) -> 
-- On EOF reduce production list(statement) -> 
-- On BREAK reduce production list(statement) -> 

State 163:
list(statement) -> statement list(statement) . [ FUNCTION FCHAVE EOF BREAK ]
-- On FUNCTION reduce production list(statement) -> statement list(statement) 
-- On FCHAVE reduce production list(statement) -> statement list(statement) 
-- On EOF reduce production list(statement) -> statement list(statement) 
-- On BREAK reduce production list(statement) -> statement list(statement) 

State 164:
statement -> chamada_funcao . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
termo -> chamada_funcao . [ INCR DECR ]
-- On WHILE reduce production statement -> chamada_funcao 
-- On VAR reduce production statement -> chamada_funcao 
-- On SWITCH reduce production statement -> chamada_funcao 
-- On RETURN reduce production statement -> chamada_funcao 
-- On LITSTRING reduce production statement -> chamada_funcao 
-- On LITINT reduce production statement -> chamada_funcao 
-- On LITFLOAT reduce production statement -> chamada_funcao 
-- On LITCHAR reduce production statement -> chamada_funcao 
-- On LITBOOL reduce production statement -> chamada_funcao 
-- On LET reduce production statement -> chamada_funcao 
-- On INCR reduce production statement -> chamada_funcao 
-- On INCR reduce production termo -> chamada_funcao 
-- On IF reduce production statement -> chamada_funcao 
-- On ID reduce production statement -> chamada_funcao 
-- On FUNCTION reduce production statement -> chamada_funcao 
-- On FOR reduce production statement -> chamada_funcao 
-- On FCHAVE reduce production statement -> chamada_funcao 
-- On EOF reduce production statement -> chamada_funcao 
-- On ELSE reduce production statement -> chamada_funcao 
-- On DO reduce production statement -> chamada_funcao 
-- On DECR reduce production statement -> chamada_funcao 
-- On DECR reduce production termo -> chamada_funcao 
-- On CONST reduce production statement -> chamada_funcao 
-- On CONSOLELOG reduce production statement -> chamada_funcao 
-- On BREAK reduce production statement -> chamada_funcao 
** Conflict on INCR DECR

State 165:
stm_dowhile -> DO ACHAVE list(statement) . FCHAVE WHILE APAR expressao FPAR [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On FCHAVE shift to state 166

State 166:
stm_dowhile -> DO ACHAVE list(statement) FCHAVE . WHILE APAR expressao FPAR [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 167

State 167:
stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE . APAR expressao FPAR [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On APAR shift to state 168

State 168:
stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR . expressao FPAR [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On NOT shift to state 12
-- On MENOS shift to state 20
-- On MAIS shift to state 25
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On INCR shift to state 29
-- On ID shift to state 18
-- On DECR shift to state 31
-- On APAR shift to state 33
-- On variavel shift to state 21
-- On termo shift to state 34
-- On literal shift to state 27
-- On expressao shift to state 169
-- On chamada_funcao shift to state 28

State 169:
expressao -> expressao . operador expressao [ POT OR MULTATRIB MULT MOD MENOSATRIB MENOS MENORIGUAL MENOR MAISATRIB MAIS MAIORIGUAL MAIOR IGUAL FPAR DIV DIF AND ]
stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao . FPAR [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On POT shift to state 38
-- On OR shift to state 39
-- On MULTATRIB shift to state 40
-- On MULT shift to state 41
-- On MOD shift to state 42
-- On MENOSATRIB shift to state 43
-- On MENOS shift to state 44
-- On MENORIGUAL shift to state 45
-- On MENOR shift to state 46
-- On MAISATRIB shift to state 47
-- On MAIS shift to state 48
-- On MAIORIGUAL shift to state 49
-- On MAIOR shift to state 50
-- On IGUAL shift to state 51
-- On FPAR shift to state 170
-- On DIV shift to state 53
-- On DIF shift to state 54
-- On AND shift to state 55
-- On operador shift to state 56

State 170:
stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On VAR reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On SWITCH reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On RETURN reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On LITSTRING reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On LITINT reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On LITFLOAT reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On LITCHAR reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On LITBOOL reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On LET reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On INCR reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On IF reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On ID reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On FUNCTION reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On FOR reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On FCHAVE reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On EOF reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On ELSE reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On DO reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On DECR reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On CONST reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On CONSOLELOG reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 
-- On BREAK reduce production stm_dowhile -> DO ACHAVE list(statement) FCHAVE WHILE APAR expressao FPAR 

State 171:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE . list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 172
-- On chamada_funcao shift to state 164
-- On FCHAVE reduce production list(statement) -> 

State 172:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) . FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On FCHAVE shift to state 173

State 173:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On VAR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On SWITCH reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On RETURN reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITSTRING reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITINT reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITFLOAT reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITCHAR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITBOOL reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LET reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On INCR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On IF reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On ID reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On FUNCTION reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On FOR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On FCHAVE reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On EOF reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On ELSE reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On DO reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On DECR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On CONST reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On CONSOLELOG reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 
-- On BREAK reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR ACHAVE list(statement) FCHAVE 

State 174:
stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On VAR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On SWITCH reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On RETURN reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On LITSTRING reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On LITINT reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On LITFLOAT reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On LITCHAR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On LITBOOL reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On LET reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On INCR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On IF reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On ID reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On FUNCTION reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On FOR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On FCHAVE reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On EOF reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On ELSE reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On DO reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On DECR reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On CONST reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On CONSOLELOG reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 
-- On BREAK reduce production stm_for -> FOR APAR variavel ATRIB expressao PONTOVIRG variavel operador expressao PONTOVIRG expressao FPAR statement 

State 175:
stm_if -> IF APAR expressao FPAR ACHAVE . list(statement) FCHAVE option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 176
-- On chamada_funcao shift to state 164
-- On FCHAVE reduce production list(statement) -> 

State 176:
stm_if -> IF APAR expressao FPAR ACHAVE list(statement) . FCHAVE option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On FCHAVE shift to state 177

State 177:
stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE . option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ELSE shift to state 178
-- On stm_else shift to state 183
-- On option(stm_else) shift to state 184
-- On WHILE reduce production option(stm_else) -> 
-- On VAR reduce production option(stm_else) -> 
-- On SWITCH reduce production option(stm_else) -> 
-- On RETURN reduce production option(stm_else) -> 
-- On LITSTRING reduce production option(stm_else) -> 
-- On LITINT reduce production option(stm_else) -> 
-- On LITFLOAT reduce production option(stm_else) -> 
-- On LITCHAR reduce production option(stm_else) -> 
-- On LITBOOL reduce production option(stm_else) -> 
-- On LET reduce production option(stm_else) -> 
-- On INCR reduce production option(stm_else) -> 
-- On IF reduce production option(stm_else) -> 
-- On ID reduce production option(stm_else) -> 
-- On FUNCTION reduce production option(stm_else) -> 
-- On FOR reduce production option(stm_else) -> 
-- On FCHAVE reduce production option(stm_else) -> 
-- On EOF reduce production option(stm_else) -> 
-- On ELSE reduce production option(stm_else) -> 
-- On DO reduce production option(stm_else) -> 
-- On DECR reduce production option(stm_else) -> 
-- On CONST reduce production option(stm_else) -> 
-- On CONSOLELOG reduce production option(stm_else) -> 
-- On BREAK reduce production option(stm_else) -> 
** Conflict on ELSE

State 178:
stm_else -> ELSE . statement [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
stm_else -> ELSE . ACHAVE list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On ACHAVE shift to state 179
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 182
-- On literal shift to state 27
-- On chamada_funcao shift to state 164

State 179:
stm_else -> ELSE ACHAVE . list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 180
-- On chamada_funcao shift to state 164
-- On FCHAVE reduce production list(statement) -> 

State 180:
stm_else -> ELSE ACHAVE list(statement) . FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On FCHAVE shift to state 181

State 181:
stm_else -> ELSE ACHAVE list(statement) FCHAVE . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On VAR reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On SWITCH reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On RETURN reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On LITSTRING reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On LITINT reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On LITFLOAT reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On LITCHAR reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On LITBOOL reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On LET reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On INCR reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On IF reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On ID reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On FUNCTION reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On FOR reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On FCHAVE reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On EOF reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On ELSE reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On DO reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On DECR reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On CONST reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On CONSOLELOG reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 
-- On BREAK reduce production stm_else -> ELSE ACHAVE list(statement) FCHAVE 

State 182:
stm_else -> ELSE statement . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_else -> ELSE statement 
-- On VAR reduce production stm_else -> ELSE statement 
-- On SWITCH reduce production stm_else -> ELSE statement 
-- On RETURN reduce production stm_else -> ELSE statement 
-- On LITSTRING reduce production stm_else -> ELSE statement 
-- On LITINT reduce production stm_else -> ELSE statement 
-- On LITFLOAT reduce production stm_else -> ELSE statement 
-- On LITCHAR reduce production stm_else -> ELSE statement 
-- On LITBOOL reduce production stm_else -> ELSE statement 
-- On LET reduce production stm_else -> ELSE statement 
-- On INCR reduce production stm_else -> ELSE statement 
-- On IF reduce production stm_else -> ELSE statement 
-- On ID reduce production stm_else -> ELSE statement 
-- On FUNCTION reduce production stm_else -> ELSE statement 
-- On FOR reduce production stm_else -> ELSE statement 
-- On FCHAVE reduce production stm_else -> ELSE statement 
-- On EOF reduce production stm_else -> ELSE statement 
-- On ELSE reduce production stm_else -> ELSE statement 
-- On DO reduce production stm_else -> ELSE statement 
-- On DECR reduce production stm_else -> ELSE statement 
-- On CONST reduce production stm_else -> ELSE statement 
-- On CONSOLELOG reduce production stm_else -> ELSE statement 
-- On BREAK reduce production stm_else -> ELSE statement 

State 183:
option(stm_else) -> stm_else . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production option(stm_else) -> stm_else 
-- On VAR reduce production option(stm_else) -> stm_else 
-- On SWITCH reduce production option(stm_else) -> stm_else 
-- On RETURN reduce production option(stm_else) -> stm_else 
-- On LITSTRING reduce production option(stm_else) -> stm_else 
-- On LITINT reduce production option(stm_else) -> stm_else 
-- On LITFLOAT reduce production option(stm_else) -> stm_else 
-- On LITCHAR reduce production option(stm_else) -> stm_else 
-- On LITBOOL reduce production option(stm_else) -> stm_else 
-- On LET reduce production option(stm_else) -> stm_else 
-- On INCR reduce production option(stm_else) -> stm_else 
-- On IF reduce production option(stm_else) -> stm_else 
-- On ID reduce production option(stm_else) -> stm_else 
-- On FUNCTION reduce production option(stm_else) -> stm_else 
-- On FOR reduce production option(stm_else) -> stm_else 
-- On FCHAVE reduce production option(stm_else) -> stm_else 
-- On EOF reduce production option(stm_else) -> stm_else 
-- On ELSE reduce production option(stm_else) -> stm_else 
-- On DO reduce production option(stm_else) -> stm_else 
-- On DECR reduce production option(stm_else) -> stm_else 
-- On CONST reduce production option(stm_else) -> stm_else 
-- On CONSOLELOG reduce production option(stm_else) -> stm_else 
-- On BREAK reduce production option(stm_else) -> stm_else 

State 184:
stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On VAR reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On SWITCH reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On RETURN reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On LITSTRING reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On LITINT reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On LITFLOAT reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On LITCHAR reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On LITBOOL reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On LET reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On INCR reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On IF reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On ID reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On FUNCTION reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On FOR reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On FCHAVE reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On EOF reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On ELSE reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On DO reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On DECR reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On CONST reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On CONSOLELOG reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 
-- On BREAK reduce production stm_if -> IF APAR expressao FPAR ACHAVE list(statement) FCHAVE option(stm_else) 

State 185:
stm_if -> IF APAR expressao FPAR statement . option(stm_else) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On ELSE shift to state 178
-- On stm_else shift to state 183
-- On option(stm_else) shift to state 186
-- On WHILE reduce production option(stm_else) -> 
-- On VAR reduce production option(stm_else) -> 
-- On SWITCH reduce production option(stm_else) -> 
-- On RETURN reduce production option(stm_else) -> 
-- On LITSTRING reduce production option(stm_else) -> 
-- On LITINT reduce production option(stm_else) -> 
-- On LITFLOAT reduce production option(stm_else) -> 
-- On LITCHAR reduce production option(stm_else) -> 
-- On LITBOOL reduce production option(stm_else) -> 
-- On LET reduce production option(stm_else) -> 
-- On INCR reduce production option(stm_else) -> 
-- On IF reduce production option(stm_else) -> 
-- On ID reduce production option(stm_else) -> 
-- On FUNCTION reduce production option(stm_else) -> 
-- On FOR reduce production option(stm_else) -> 
-- On FCHAVE reduce production option(stm_else) -> 
-- On EOF reduce production option(stm_else) -> 
-- On ELSE reduce production option(stm_else) -> 
-- On DO reduce production option(stm_else) -> 
-- On DECR reduce production option(stm_else) -> 
-- On CONST reduce production option(stm_else) -> 
-- On CONSOLELOG reduce production option(stm_else) -> 
-- On BREAK reduce production option(stm_else) -> 
** Conflict on ELSE

State 186:
stm_if -> IF APAR expressao FPAR statement option(stm_else) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On VAR reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On SWITCH reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On RETURN reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On LITSTRING reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On LITINT reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On LITFLOAT reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On LITCHAR reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On LITBOOL reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On LET reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On INCR reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On IF reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On ID reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On FUNCTION reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On FOR reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On FCHAVE reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On EOF reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On ELSE reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On DO reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On DECR reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On CONST reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On CONSOLELOG reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 
-- On BREAK reduce production stm_if -> IF APAR expressao FPAR statement option(stm_else) 

State 187:
case -> CASE LITSTRING DOISPTO list(statement) . BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On BREAK shift to state 188

State 188:
case -> CASE LITSTRING DOISPTO list(statement) BREAK . option(stm_ptv) [ DEFAULT CASE ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 189
-- On DEFAULT reduce production option(stm_ptv) -> 
-- On CASE reduce production option(stm_ptv) -> 

State 189:
case -> CASE LITSTRING DOISPTO list(statement) BREAK option(stm_ptv) . [ DEFAULT CASE ]
-- On DEFAULT reduce production case -> CASE LITSTRING DOISPTO list(statement) BREAK option(stm_ptv) 
-- On CASE reduce production case -> CASE LITSTRING DOISPTO list(statement) BREAK option(stm_ptv) 

State 190:
case -> CASE LITINT . DOISPTO list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On DOISPTO shift to state 191

State 191:
case -> CASE LITINT DOISPTO . list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 192
-- On chamada_funcao shift to state 164
-- On BREAK reduce production list(statement) -> 

State 192:
case -> CASE LITINT DOISPTO list(statement) . BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On BREAK shift to state 193

State 193:
case -> CASE LITINT DOISPTO list(statement) BREAK . option(stm_ptv) [ DEFAULT CASE ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 194
-- On DEFAULT reduce production option(stm_ptv) -> 
-- On CASE reduce production option(stm_ptv) -> 

State 194:
case -> CASE LITINT DOISPTO list(statement) BREAK option(stm_ptv) . [ DEFAULT CASE ]
-- On DEFAULT reduce production case -> CASE LITINT DOISPTO list(statement) BREAK option(stm_ptv) 
-- On CASE reduce production case -> CASE LITINT DOISPTO list(statement) BREAK option(stm_ptv) 

State 195:
case -> CASE LITCHAR . DOISPTO list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On DOISPTO shift to state 196

State 196:
case -> CASE LITCHAR DOISPTO . list(statement) BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 197
-- On chamada_funcao shift to state 164
-- On BREAK reduce production list(statement) -> 

State 197:
case -> CASE LITCHAR DOISPTO list(statement) . BREAK option(stm_ptv) [ DEFAULT CASE ]
-- On BREAK shift to state 198

State 198:
case -> CASE LITCHAR DOISPTO list(statement) BREAK . option(stm_ptv) [ DEFAULT CASE ]
-- On PONTOVIRG shift to state 62
-- On stm_ptv shift to state 63
-- On option(stm_ptv) shift to state 199
-- On DEFAULT reduce production option(stm_ptv) -> 
-- On CASE reduce production option(stm_ptv) -> 

State 199:
case -> CASE LITCHAR DOISPTO list(statement) BREAK option(stm_ptv) . [ DEFAULT CASE ]
-- On DEFAULT reduce production case -> CASE LITCHAR DOISPTO list(statement) BREAK option(stm_ptv) 
-- On CASE reduce production case -> CASE LITCHAR DOISPTO list(statement) BREAK option(stm_ptv) 

State 200:
stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) . DEFAULT DOISPTO list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On DEFAULT shift to state 201

State 201:
stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT . DOISPTO list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On DOISPTO shift to state 202

State 202:
stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO . list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 203
-- On chamada_funcao shift to state 164
-- On FCHAVE reduce production list(statement) -> 

State 203:
stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) . FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On FCHAVE shift to state 204

State 204:
stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On VAR reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On SWITCH reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On RETURN reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On LITSTRING reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On LITINT reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On LITFLOAT reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On LITCHAR reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On LITBOOL reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On LET reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On INCR reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On IF reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On ID reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On FUNCTION reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On FOR reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On FCHAVE reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On EOF reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On ELSE reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On DO reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On DECR reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On CONST reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On CONSOLELOG reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 
-- On BREAK reduce production stm_switch -> SWITCH APAR variavel FPAR ACHAVE nonempty_list(case) DEFAULT DOISPTO list(statement) FCHAVE 

State 205:
nonempty_list(case) -> case . [ DEFAULT ]
nonempty_list(case) -> case . nonempty_list(case) [ DEFAULT ]
-- On CASE shift to state 85
-- On nonempty_list(case) shift to state 206
-- On case shift to state 205
-- On DEFAULT reduce production nonempty_list(case) -> case 

State 206:
nonempty_list(case) -> case nonempty_list(case) . [ DEFAULT ]
-- On DEFAULT reduce production nonempty_list(case) -> case nonempty_list(case) 

State 207:
stm_while -> WHILE APAR expressao FPAR ACHAVE . list(statement) FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 208
-- On chamada_funcao shift to state 164
-- On FCHAVE reduce production list(statement) -> 

State 208:
stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) . FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On FCHAVE shift to state 209

State 209:
stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On VAR reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On SWITCH reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On RETURN reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITSTRING reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITINT reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITFLOAT reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITCHAR reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LITBOOL reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On LET reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On INCR reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On IF reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On ID reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On FUNCTION reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On FOR reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On FCHAVE reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On EOF reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On ELSE reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On DO reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On DECR reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On CONST reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On CONSOLELOG reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 
-- On BREAK reduce production stm_while -> WHILE APAR expressao FPAR ACHAVE list(statement) FCHAVE 

State 210:
stm_while -> WHILE APAR expressao FPAR statement . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR FCHAVE EOF ELSE DO DECR CONST CONSOLELOG BREAK ]
-- On WHILE reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On VAR reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On SWITCH reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On RETURN reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On LITSTRING reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On LITINT reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On LITFLOAT reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On LITCHAR reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On LITBOOL reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On LET reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On INCR reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On IF reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On ID reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On FUNCTION reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On FOR reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On FCHAVE reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On EOF reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On ELSE reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On DO reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On DECR reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On CONST reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On CONSOLELOG reduce production stm_while -> WHILE APAR expressao FPAR statement 
-- On BREAK reduce production stm_while -> WHILE APAR expressao FPAR statement 

State 211:
funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) . FCHAVE [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On FCHAVE shift to state 212

State 212:
funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On WHILE reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On VAR reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On SWITCH reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On RETURN reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On LITSTRING reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On LITINT reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On LITFLOAT reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On LITCHAR reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On LITBOOL reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On LET reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On INCR reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On IF reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On ID reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On FUNCTION reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On FOR reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On EOF reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On DO reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On DECR reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On CONST reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 
-- On CONSOLELOG reduce production funcao -> FUNCTION ID APAR parametros FPAR ACHAVE list(statement) FCHAVE 

State 213:
separated_nonempty_list(VIRG,parametro) -> parametro . [ FPAR ]
separated_nonempty_list(VIRG,parametro) -> parametro . VIRG separated_nonempty_list(VIRG,parametro) [ FPAR ]
-- On VIRG shift to state 214
-- On FPAR reduce production separated_nonempty_list(VIRG,parametro) -> parametro 

State 214:
separated_nonempty_list(VIRG,parametro) -> parametro VIRG . separated_nonempty_list(VIRG,parametro) [ FPAR ]
-- On VAR shift to state 4
-- On separated_nonempty_list(VIRG,parametro) shift to state 215
-- On parametro shift to state 213

State 215:
separated_nonempty_list(VIRG,parametro) -> parametro VIRG separated_nonempty_list(VIRG,parametro) . [ FPAR ]
-- On FPAR reduce production separated_nonempty_list(VIRG,parametro) -> parametro VIRG separated_nonempty_list(VIRG,parametro) 

State 216:
parametros -> loption(separated_nonempty_list(VIRG,parametro)) . [ FPAR ]
-- On FPAR reduce production parametros -> loption(separated_nonempty_list(VIRG,parametro)) 

State 217:
prog' -> prog . [ # ]
-- On # accept prog

State 218:
prog -> list(funcao) . list(statement) list(funcao) EOF [ # ]
-- On WHILE shift to state 10
-- On VAR shift to state 78
-- On SWITCH shift to state 79
-- On RETURN shift to state 88
-- On LITSTRING shift to state 13
-- On LITINT shift to state 14
-- On LITFLOAT shift to state 15
-- On LITCHAR shift to state 16
-- On LITBOOL shift to state 17
-- On LET shift to state 91
-- On INCR shift to state 92
-- On IF shift to state 95
-- On ID shift to state 18
-- On FOR shift to state 99
-- On DO shift to state 111
-- On DECR shift to state 113
-- On CONST shift to state 116
-- On CONSOLELOG shift to state 117
-- On variavel shift to state 122
-- On tipo shift to state 136
-- On termo shift to state 145
-- On stm_while shift to state 150
-- On stm_switch shift to state 151
-- On stm_return shift to state 152
-- On stm_read shift to state 153
-- On stm_print shift to state 154
-- On stm_incr_decr shift to state 155
-- On stm_if shift to state 156
-- On stm_for shift to state 157
-- On stm_dowhile shift to state 158
-- On stm_declara_var_inicializa shift to state 159
-- On stm_declara_var shift to state 160
-- On stm_attr shift to state 161
-- On statement shift to state 162
-- On literal shift to state 27
-- On list(statement) shift to state 219
-- On chamada_funcao shift to state 164
-- On FUNCTION reduce production list(statement) -> 
-- On EOF reduce production list(statement) -> 

State 219:
prog -> list(funcao) list(statement) . list(funcao) EOF [ # ]
-- On FUNCTION shift to state 1
-- On list(funcao) shift to state 220
-- On funcao shift to state 222
-- On EOF reduce production list(funcao) -> 

State 220:
prog -> list(funcao) list(statement) list(funcao) . EOF [ # ]
-- On EOF shift to state 221

State 221:
prog -> list(funcao) list(statement) list(funcao) EOF . [ # ]
-- On # reduce production prog -> list(funcao) list(statement) list(funcao) EOF 

State 222:
list(funcao) -> funcao . list(funcao) [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On FUNCTION shift to state 1
-- On list(funcao) shift to state 223
-- On funcao shift to state 222
-- On WHILE reduce production list(funcao) -> 
-- On VAR reduce production list(funcao) -> 
-- On SWITCH reduce production list(funcao) -> 
-- On RETURN reduce production list(funcao) -> 
-- On LITSTRING reduce production list(funcao) -> 
-- On LITINT reduce production list(funcao) -> 
-- On LITFLOAT reduce production list(funcao) -> 
-- On LITCHAR reduce production list(funcao) -> 
-- On LITBOOL reduce production list(funcao) -> 
-- On LET reduce production list(funcao) -> 
-- On INCR reduce production list(funcao) -> 
-- On IF reduce production list(funcao) -> 
-- On ID reduce production list(funcao) -> 
-- On FUNCTION reduce production list(funcao) -> 
-- On FOR reduce production list(funcao) -> 
-- On EOF reduce production list(funcao) -> 
-- On DO reduce production list(funcao) -> 
-- On DECR reduce production list(funcao) -> 
-- On CONST reduce production list(funcao) -> 
-- On CONSOLELOG reduce production list(funcao) -> 
** Conflict on FUNCTION

State 223:
list(funcao) -> funcao list(funcao) . [ WHILE VAR SWITCH RETURN LITSTRING LITINT LITFLOAT LITCHAR LITBOOL LET INCR IF ID FUNCTION FOR EOF DO DECR CONST CONSOLELOG ]
-- On WHILE reduce production list(funcao) -> funcao list(funcao) 
-- On VAR reduce production list(funcao) -> funcao list(funcao) 
-- On SWITCH reduce production list(funcao) -> funcao list(funcao) 
-- On RETURN reduce production list(funcao) -> funcao list(funcao) 
-- On LITSTRING reduce production list(funcao) -> funcao list(funcao) 
-- On LITINT reduce production list(funcao) -> funcao list(funcao) 
-- On LITFLOAT reduce production list(funcao) -> funcao list(funcao) 
-- On LITCHAR reduce production list(funcao) -> funcao list(funcao) 
-- On LITBOOL reduce production list(funcao) -> funcao list(funcao) 
-- On LET reduce production list(funcao) -> funcao list(funcao) 
-- On INCR reduce production list(funcao) -> funcao list(funcao) 
-- On IF reduce production list(funcao) -> funcao list(funcao) 
-- On ID reduce production list(funcao) -> funcao list(funcao) 
-- On FUNCTION reduce production list(funcao) -> funcao list(funcao) 
-- On FOR reduce production list(funcao) -> funcao list(funcao) 
-- On EOF reduce production list(funcao) -> funcao list(funcao) 
-- On DO reduce production list(funcao) -> funcao list(funcao) 
-- On DECR reduce production list(funcao) -> funcao list(funcao) 
-- On CONST reduce production list(funcao) -> funcao list(funcao) 
-- On CONSOLELOG reduce production list(funcao) -> funcao list(funcao) 

